
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_UDisks2Block_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_UDisks2Block_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace UDisks2 {

class Block_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.UDisks2.Block";

protected:
    Block_proxy(sdbus::IProxy& proxy)
        : m_proxy(proxy)
    {
    }

    Block_proxy(const Block_proxy&) = delete;
    Block_proxy& operator=(const Block_proxy&) = delete;
    Block_proxy(Block_proxy&&) = delete;
    Block_proxy& operator=(Block_proxy&&) = delete;

    ~Block_proxy() = default;

    void registerProxy()
    {
    }

public:
    void AddConfigurationItem(const sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>& item, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("AddConfigurationItem").onInterface(INTERFACE_NAME).withArguments(item, options);
    }

    void RemoveConfigurationItem(const sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>& item, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("RemoveConfigurationItem").onInterface(INTERFACE_NAME).withArguments(item, options);
    }

    void UpdateConfigurationItem(const sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>& old_item, const sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>& new_item, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("UpdateConfigurationItem").onInterface(INTERFACE_NAME).withArguments(old_item, new_item, options);
    }

    std::vector<sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>> GetSecretConfiguration(const std::map<std::string, sdbus::Variant>& options)
    {
        std::vector<sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>> result;
        m_proxy.callMethod("GetSecretConfiguration").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    void Format(const std::string& type, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("Format").onInterface(INTERFACE_NAME).withArguments(type, options);
    }

    sdbus::UnixFd OpenForBackup(const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::UnixFd result;
        m_proxy.callMethod("OpenForBackup").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    sdbus::UnixFd OpenForRestore(const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::UnixFd result;
        m_proxy.callMethod("OpenForRestore").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    sdbus::UnixFd OpenForBenchmark(const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::UnixFd result;
        m_proxy.callMethod("OpenForBenchmark").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    sdbus::UnixFd OpenDevice(const std::string& mode, const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::UnixFd result;
        m_proxy.callMethod("OpenDevice").onInterface(INTERFACE_NAME).withArguments(mode, options).storeResultsTo(result);
        return result;
    }

    void Rescan(const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("Rescan").onInterface(INTERFACE_NAME).withArguments(options);
    }

public:
    std::vector<uint8_t> Device()
    {
        return m_proxy.getProperty("Device").onInterface(INTERFACE_NAME).get<std::vector<uint8_t>>();
    }

    std::vector<uint8_t> PreferredDevice()
    {
        return m_proxy.getProperty("PreferredDevice").onInterface(INTERFACE_NAME).get<std::vector<uint8_t>>();
    }

    std::vector<std::vector<uint8_t>> Symlinks()
    {
        return m_proxy.getProperty("Symlinks").onInterface(INTERFACE_NAME).get<std::vector<std::vector<uint8_t>>>();
    }

    uint64_t DeviceNumber()
    {
        return m_proxy.getProperty("DeviceNumber").onInterface(INTERFACE_NAME).get<uint64_t>();
    }

    std::string Id()
    {
        return m_proxy.getProperty("Id").onInterface(INTERFACE_NAME).get<std::string>();
    }

    uint64_t Size()
    {
        return m_proxy.getProperty("Size").onInterface(INTERFACE_NAME).get<uint64_t>();
    }

    bool ReadOnly()
    {
        return m_proxy.getProperty("ReadOnly").onInterface(INTERFACE_NAME).get<bool>();
    }

    sdbus::ObjectPath Drive()
    {
        return m_proxy.getProperty("Drive").onInterface(INTERFACE_NAME).get<sdbus::ObjectPath>();
    }

    sdbus::ObjectPath MDRaid()
    {
        return m_proxy.getProperty("MDRaid").onInterface(INTERFACE_NAME).get<sdbus::ObjectPath>();
    }

    sdbus::ObjectPath MDRaidMember()
    {
        return m_proxy.getProperty("MDRaidMember").onInterface(INTERFACE_NAME).get<sdbus::ObjectPath>();
    }

    std::string IdUsage()
    {
        return m_proxy.getProperty("IdUsage").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string IdType()
    {
        return m_proxy.getProperty("IdType").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string IdVersion()
    {
        return m_proxy.getProperty("IdVersion").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string IdLabel()
    {
        return m_proxy.getProperty("IdLabel").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string IdUUID()
    {
        return m_proxy.getProperty("IdUUID").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::vector<sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>> Configuration()
    {
        return m_proxy.getProperty("Configuration").onInterface(INTERFACE_NAME).get<std::vector<sdbus::Struct<std::string, std::map<std::string, sdbus::Variant>>>>();
    }

    sdbus::ObjectPath CryptoBackingDevice()
    {
        return m_proxy.getProperty("CryptoBackingDevice").onInterface(INTERFACE_NAME).get<sdbus::ObjectPath>();
    }

    bool HintPartitionable()
    {
        return m_proxy.getProperty("HintPartitionable").onInterface(INTERFACE_NAME).get<bool>();
    }

    bool HintSystem()
    {
        return m_proxy.getProperty("HintSystem").onInterface(INTERFACE_NAME).get<bool>();
    }

    bool HintIgnore()
    {
        return m_proxy.getProperty("HintIgnore").onInterface(INTERFACE_NAME).get<bool>();
    }

    bool HintAuto()
    {
        return m_proxy.getProperty("HintAuto").onInterface(INTERFACE_NAME).get<bool>();
    }

    std::string HintName()
    {
        return m_proxy.getProperty("HintName").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string HintIconName()
    {
        return m_proxy.getProperty("HintIconName").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string HintSymbolicIconName()
    {
        return m_proxy.getProperty("HintSymbolicIconName").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::vector<std::string> UserspaceMountOptions()
    {
        return m_proxy.getProperty("UserspaceMountOptions").onInterface(INTERFACE_NAME).get<std::vector<std::string>>();
    }

private:
    sdbus::IProxy& m_proxy;
};

}}} // namespaces

#endif
