
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_net_connman_Service_service_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_net_connman_Service_service_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace net {
namespace connman {

class Service_proxy {
 public:
  static constexpr const char* INTERFACE_NAME = "net.connman.Service";

 protected:
  Service_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Service_proxy(const Service_proxy&) = delete;
  Service_proxy& operator=(const Service_proxy&) = delete;
  Service_proxy(Service_proxy&&) = delete;
  Service_proxy& operator=(Service_proxy&&) = delete;

  ~Service_proxy() = default;

  void registerProxy() {
    m_proxy.uponSignal("PropertyChanged")
        .onInterface(INTERFACE_NAME)
        .call([this](const std::string& name, const sdbus::Variant& value) {
          this->onPropertyChanged(name, value);
        });
  }

  virtual void onPropertyChanged(const std::string& name,
                                 const sdbus::Variant& value) = 0;

 public:
  std::map<std::string, sdbus::Variant> GetProperties() {
    std::map<std::string, sdbus::Variant> result;
    m_proxy.callMethod("GetProperties")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  void SetProperty(const std::string& name, const sdbus::Variant& value) {
    m_proxy.callMethod("SetProperty")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, value);
  }

  void ClearProperty(const std::string& name) {
    m_proxy.callMethod("ClearProperty")
        .onInterface(INTERFACE_NAME)
        .withArguments(name);
  }

  void Connect() { m_proxy.callMethod("Connect").onInterface(INTERFACE_NAME); }

  void Disconnect() {
    m_proxy.callMethod("Disconnect").onInterface(INTERFACE_NAME);
  }

  void Remove() { m_proxy.callMethod("Remove").onInterface(INTERFACE_NAME); }

  void MoveBefore(const sdbus::ObjectPath& service) {
    m_proxy.callMethod("MoveBefore")
        .onInterface(INTERFACE_NAME)
        .withArguments(service);
  }

  void MoveAfter(const sdbus::ObjectPath& service) {
    m_proxy.callMethod("MoveAfter")
        .onInterface(INTERFACE_NAME)
        .withArguments(service);
  }

  void ResetCounters() {
    m_proxy.callMethod("ResetCounters").onInterface(INTERFACE_NAME);
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace connman
}  // namespace net

#endif
