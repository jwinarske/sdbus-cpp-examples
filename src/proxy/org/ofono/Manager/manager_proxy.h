
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_ofono_Manager_manager_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_ofono_Manager_manager_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace ofono {

class Manager_proxy {
 public:
  static constexpr const char* INTERFACE_NAME = "org.ofono.Manager";

 protected:
  Manager_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Manager_proxy(const Manager_proxy&) = delete;
  Manager_proxy& operator=(const Manager_proxy&) = delete;
  Manager_proxy(Manager_proxy&&) = delete;
  Manager_proxy& operator=(Manager_proxy&&) = delete;

  ~Manager_proxy() = default;

  void registerProxy() {
    m_proxy.uponSignal("ModemAdded")
        .onInterface(INTERFACE_NAME)
        .call([this](const sdbus::ObjectPath& path,
                     const std::map<std::string, sdbus::Variant>& properties) {
          this->onModemAdded(path, properties);
        });
    m_proxy.uponSignal("ModemRemoved")
        .onInterface(INTERFACE_NAME)
        .call([this](const sdbus::ObjectPath& path) {
          this->onModemRemoved(path);
        });
  }

  virtual void onModemAdded(
      const sdbus::ObjectPath& path,
      const std::map<std::string, sdbus::Variant>& properties) = 0;
  virtual void onModemRemoved(const sdbus::ObjectPath& path) = 0;

 public:
  std::vector<
      sdbus::Struct<sdbus::ObjectPath, std::map<std::string, sdbus::Variant>>>
  GetModems() {
    std::vector<
        sdbus::Struct<sdbus::ObjectPath, std::map<std::string, sdbus::Variant>>>
        result;
    m_proxy.callMethod("GetModems")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace ofono
}  // namespace org

#endif
