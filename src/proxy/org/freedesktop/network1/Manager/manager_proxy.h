
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_freedesktop_network1_Manager_manager_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_freedesktop_network1_Manager_manager_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace network1 {

class Manager_proxy {
 public:
  static constexpr const char* INTERFACE_NAME =
      "org.freedesktop.network1.Manager";

 protected:
  Manager_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Manager_proxy(const Manager_proxy&) = delete;
  Manager_proxy& operator=(const Manager_proxy&) = delete;
  Manager_proxy(Manager_proxy&&) = delete;
  Manager_proxy& operator=(Manager_proxy&&) = delete;

  ~Manager_proxy() = default;

  void registerProxy() {}

 public:
  std::vector<sdbus::Struct<int32_t, std::string, sdbus::ObjectPath>>
  ListLinks() {
    std::vector<sdbus::Struct<int32_t, std::string, sdbus::ObjectPath>> result;
    m_proxy.callMethod("ListLinks")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<int32_t, sdbus::ObjectPath> GetLinkByName(
      const std::string& name) {
    std::tuple<int32_t, sdbus::ObjectPath> result;
    m_proxy.callMethod("GetLinkByName")
        .onInterface(INTERFACE_NAME)
        .withArguments(name)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<std::string, sdbus::ObjectPath> GetLinkByIndex(
      const int32_t& ifindex) {
    std::tuple<std::string, sdbus::ObjectPath> result;
    m_proxy.callMethod("GetLinkByIndex")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex)
        .storeResultsTo(result);
    return result;
  }

  void SetLinkNTP(const int32_t& ifindex,
                  const std::vector<std::string>& servers) {
    m_proxy.callMethod("SetLinkNTP")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, servers);
  }

  void SetLinkDNS(
      const int32_t& ifindex,
      const std::vector<sdbus::Struct<int32_t, std::vector<uint8_t>>>&
          addresses) {
    m_proxy.callMethod("SetLinkDNS")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, addresses);
  }

  void SetLinkDNSEx(
      const int32_t& ifindex,
      const std::vector<
          sdbus::Struct<int32_t, std::vector<uint8_t>, uint16_t, std::string>>&
          addresses) {
    m_proxy.callMethod("SetLinkDNSEx")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, addresses);
  }

  void SetLinkDomains(
      const int32_t& ifindex,
      const std::vector<sdbus::Struct<std::string, bool>>& domains) {
    m_proxy.callMethod("SetLinkDomains")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, domains);
  }

  void SetLinkDefaultRoute(const int32_t& ifindex, const bool& enable) {
    m_proxy.callMethod("SetLinkDefaultRoute")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, enable);
  }

  void SetLinkLLMNR(const int32_t& ifindex, const std::string& mode) {
    m_proxy.callMethod("SetLinkLLMNR")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, mode);
  }

  void SetLinkMulticastDNS(const int32_t& ifindex, const std::string& mode) {
    m_proxy.callMethod("SetLinkMulticastDNS")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, mode);
  }

  void SetLinkDNSOverTLS(const int32_t& ifindex, const std::string& mode) {
    m_proxy.callMethod("SetLinkDNSOverTLS")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, mode);
  }

  void SetLinkDNSSEC(const int32_t& ifindex, const std::string& mode) {
    m_proxy.callMethod("SetLinkDNSSEC")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, mode);
  }

  void SetLinkDNSSECNegativeTrustAnchors(
      const int32_t& ifindex,
      const std::vector<std::string>& names) {
    m_proxy.callMethod("SetLinkDNSSECNegativeTrustAnchors")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex, names);
  }

  void RevertLinkNTP(const int32_t& ifindex) {
    m_proxy.callMethod("RevertLinkNTP")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex);
  }

  void RevertLinkDNS(const int32_t& ifindex) {
    m_proxy.callMethod("RevertLinkDNS")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex);
  }

  void RenewLink(const int32_t& ifindex) {
    m_proxy.callMethod("RenewLink")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex);
  }

  void ForceRenewLink(const int32_t& ifindex) {
    m_proxy.callMethod("ForceRenewLink")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex);
  }

  void ReconfigureLink(const int32_t& ifindex) {
    m_proxy.callMethod("ReconfigureLink")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex);
  }

  void Reload() { m_proxy.callMethod("Reload").onInterface(INTERFACE_NAME); }

  std::string DescribeLink(const int32_t& ifindex) {
    std::string result;
    m_proxy.callMethod("DescribeLink")
        .onInterface(INTERFACE_NAME)
        .withArguments(ifindex)
        .storeResultsTo(result);
    return result;
  }

  std::string Describe() {
    std::string result;
    m_proxy.callMethod("Describe")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

 public:
  std::string OperationalState() {
    return m_proxy.getProperty("OperationalState")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string CarrierState() {
    return m_proxy.getProperty("CarrierState")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string AddressState() {
    return m_proxy.getProperty("AddressState")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string IPv4AddressState() {
    return m_proxy.getProperty("IPv4AddressState")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string IPv6AddressState() {
    return m_proxy.getProperty("IPv6AddressState")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string OnlineState() {
    return m_proxy.getProperty("OnlineState")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t NamespaceId() {
    return m_proxy.getProperty("NamespaceId")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace network1
}  // namespace freedesktop
}  // namespace org

#endif
