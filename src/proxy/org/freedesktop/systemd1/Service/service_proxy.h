
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_freedesktop_systemd1_Service_service_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_freedesktop_systemd1_Service_service_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace systemd1 {

class Service_proxy {
 public:
  static constexpr const char* INTERFACE_NAME =
      "org.freedesktop.systemd1.Service";

 protected:
  Service_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Service_proxy(const Service_proxy&) = delete;
  Service_proxy& operator=(const Service_proxy&) = delete;
  Service_proxy(Service_proxy&&) = delete;
  Service_proxy& operator=(Service_proxy&&) = delete;

  ~Service_proxy() = default;

  void registerProxy() {}

 public:
  void BindMount(const std::string& source,
                 const std::string& destination,
                 const bool& read_only,
                 const bool& mkdir) {
    m_proxy.callMethod("BindMount")
        .onInterface(INTERFACE_NAME)
        .withArguments(source, destination, read_only, mkdir);
  }

  void MountImage(
      const std::string& source,
      const std::string& destination,
      const bool& read_only,
      const bool& mkdir,
      const std::vector<sdbus::Struct<std::string, std::string>>& options) {
    m_proxy.callMethod("MountImage")
        .onInterface(INTERFACE_NAME)
        .withArguments(source, destination, read_only, mkdir, options);
  }

  std::vector<sdbus::Struct<std::string,
                            uint32_t,
                            uint32_t,
                            uint32_t,
                            uint64_t,
                            uint32_t,
                            uint32_t,
                            std::string,
                            uint32_t>>
  DumpFileDescriptorStore() {
    std::vector<
        sdbus::Struct<std::string, uint32_t, uint32_t, uint32_t, uint64_t,
                      uint32_t, uint32_t, std::string, uint32_t>>
        result;
    m_proxy.callMethod("DumpFileDescriptorStore")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, uint32_t, std::string>>
  GetProcesses() {
    std::vector<sdbus::Struct<std::string, uint32_t, std::string>> result;
    m_proxy.callMethod("GetProcesses")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  void AttachProcesses(const std::string& subcgroup,
                       const std::vector<uint32_t>& pids) {
    m_proxy.callMethod("AttachProcesses")
        .onInterface(INTERFACE_NAME)
        .withArguments(subcgroup, pids);
  }

 public:
  std::string Type() {
    return m_proxy.getProperty("Type")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ExitType() {
    return m_proxy.getProperty("ExitType")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Restart() {
    return m_proxy.getProperty("Restart")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string RestartMode() {
    return m_proxy.getProperty("RestartMode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string PIDFile() {
    return m_proxy.getProperty("PIDFile")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string NotifyAccess() {
    return m_proxy.getProperty("NotifyAccess")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t RestartUSec() {
    return m_proxy.getProperty("RestartUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint32_t RestartSteps() {
    return m_proxy.getProperty("RestartSteps")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint64_t RestartMaxDelayUSec() {
    return m_proxy.getProperty("RestartMaxDelayUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t RestartUSecNext() {
    return m_proxy.getProperty("RestartUSecNext")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t TimeoutStartUSec() {
    return m_proxy.getProperty("TimeoutStartUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t TimeoutStopUSec() {
    return m_proxy.getProperty("TimeoutStopUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t TimeoutAbortUSec() {
    return m_proxy.getProperty("TimeoutAbortUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::string TimeoutStartFailureMode() {
    return m_proxy.getProperty("TimeoutStartFailureMode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string TimeoutStopFailureMode() {
    return m_proxy.getProperty("TimeoutStopFailureMode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t RuntimeMaxUSec() {
    return m_proxy.getProperty("RuntimeMaxUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t RuntimeRandomizedExtraUSec() {
    return m_proxy.getProperty("RuntimeRandomizedExtraUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t WatchdogUSec() {
    return m_proxy.getProperty("WatchdogUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t WatchdogTimestamp() {
    return m_proxy.getProperty("WatchdogTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t WatchdogTimestampMonotonic() {
    return m_proxy.getProperty("WatchdogTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  bool RootDirectoryStartOnly() {
    return m_proxy.getProperty("RootDirectoryStartOnly")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool RemainAfterExit() {
    return m_proxy.getProperty("RemainAfterExit")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool GuessMainPID() {
    return m_proxy.getProperty("GuessMainPID")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  sdbus::Struct<std::vector<int32_t>, std::vector<int32_t>>
  RestartPreventExitStatus() {
    return m_proxy.getProperty("RestartPreventExitStatus")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<std::vector<int32_t>, std::vector<int32_t>>>();
  }

  sdbus::Struct<std::vector<int32_t>, std::vector<int32_t>>
  RestartForceExitStatus() {
    return m_proxy.getProperty("RestartForceExitStatus")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<std::vector<int32_t>, std::vector<int32_t>>>();
  }

  sdbus::Struct<std::vector<int32_t>, std::vector<int32_t>>
  SuccessExitStatus() {
    return m_proxy.getProperty("SuccessExitStatus")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<std::vector<int32_t>, std::vector<int32_t>>>();
  }

  uint32_t MainPID() {
    return m_proxy.getProperty("MainPID")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t ControlPID() {
    return m_proxy.getProperty("ControlPID")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::string BusName() {
    return m_proxy.getProperty("BusName")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint32_t FileDescriptorStoreMax() {
    return m_proxy.getProperty("FileDescriptorStoreMax")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t NFileDescriptorStore() {
    return m_proxy.getProperty("NFileDescriptorStore")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::string FileDescriptorStorePreserve() {
    return m_proxy.getProperty("FileDescriptorStorePreserve")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string StatusText() {
    return m_proxy.getProperty("StatusText")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  int32_t StatusErrno() {
    return m_proxy.getProperty("StatusErrno")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  std::string Result() {
    return m_proxy.getProperty("Result")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ReloadResult() {
    return m_proxy.getProperty("ReloadResult")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string CleanResult() {
    return m_proxy.getProperty("CleanResult")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string USBFunctionDescriptors() {
    return m_proxy.getProperty("USBFunctionDescriptors")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string USBFunctionStrings() {
    return m_proxy.getProperty("USBFunctionStrings")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint32_t UID() {
    return m_proxy.getProperty("UID")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t GID() {
    return m_proxy.getProperty("GID")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t NRestarts() {
    return m_proxy.getProperty("NRestarts")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::string OOMPolicy() {
    return m_proxy.getProperty("OOMPolicy")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<sdbus::Struct<std::string, std::string, uint64_t>> OpenFile() {
    return m_proxy.getProperty("OpenFile")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string, uint64_t>>>();
  }

  int32_t ReloadSignal() {
    return m_proxy.getProperty("ReloadSignal")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  uint64_t ExecMainStartTimestamp() {
    return m_proxy.getProperty("ExecMainStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t ExecMainStartTimestampMonotonic() {
    return m_proxy.getProperty("ExecMainStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t ExecMainExitTimestamp() {
    return m_proxy.getProperty("ExecMainExitTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t ExecMainExitTimestampMonotonic() {
    return m_proxy.getProperty("ExecMainExitTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t ExecMainHandoffTimestamp() {
    return m_proxy.getProperty("ExecMainHandoffTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t ExecMainHandoffTimestampMonotonic() {
    return m_proxy.getProperty("ExecMainHandoffTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint32_t ExecMainPID() {
    return m_proxy.getProperty("ExecMainPID")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  int32_t ExecMainCode() {
    return m_proxy.getProperty("ExecMainCode")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t ExecMainStatus() {
    return m_proxy.getProperty("ExecMainStatus")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            bool,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecCondition() {
    return m_proxy.getProperty("ExecCondition")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::vector<std::string>, bool, uint64_t, uint64_t,
            uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            std::vector<std::string>,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecConditionEx() {
    return m_proxy.getProperty("ExecConditionEx")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::vector<std::string>,
                          std::vector<std::string>, uint64_t, uint64_t,
                          uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            bool,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStartPre() {
    return m_proxy.getProperty("ExecStartPre")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::vector<std::string>, bool, uint64_t, uint64_t,
            uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            std::vector<std::string>,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStartPreEx() {
    return m_proxy.getProperty("ExecStartPreEx")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::vector<std::string>,
                          std::vector<std::string>, uint64_t, uint64_t,
                          uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            bool,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStart() {
    return m_proxy.getProperty("ExecStart")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::vector<std::string>, bool, uint64_t, uint64_t,
            uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            std::vector<std::string>,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStartEx() {
    return m_proxy.getProperty("ExecStartEx")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::vector<std::string>,
                          std::vector<std::string>, uint64_t, uint64_t,
                          uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            bool,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStartPost() {
    return m_proxy.getProperty("ExecStartPost")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::vector<std::string>, bool, uint64_t, uint64_t,
            uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            std::vector<std::string>,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStartPostEx() {
    return m_proxy.getProperty("ExecStartPostEx")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::vector<std::string>,
                          std::vector<std::string>, uint64_t, uint64_t,
                          uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            bool,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecReload() {
    return m_proxy.getProperty("ExecReload")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::vector<std::string>, bool, uint64_t, uint64_t,
            uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            std::vector<std::string>,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecReloadEx() {
    return m_proxy.getProperty("ExecReloadEx")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::vector<std::string>,
                          std::vector<std::string>, uint64_t, uint64_t,
                          uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            bool,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStop() {
    return m_proxy.getProperty("ExecStop")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::vector<std::string>, bool, uint64_t, uint64_t,
            uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            std::vector<std::string>,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStopEx() {
    return m_proxy.getProperty("ExecStopEx")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::vector<std::string>,
                          std::vector<std::string>, uint64_t, uint64_t,
                          uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            bool,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStopPost() {
    return m_proxy.getProperty("ExecStopPost")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::vector<std::string>, bool, uint64_t, uint64_t,
            uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::vector<sdbus::Struct<std::string,
                            std::vector<std::string>,
                            std::vector<std::string>,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint64_t,
                            uint32_t,
                            int32_t,
                            int32_t>>
  ExecStopPostEx() {
    return m_proxy.getProperty("ExecStopPostEx")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::vector<std::string>,
                          std::vector<std::string>, uint64_t, uint64_t,
                          uint64_t, uint64_t, uint32_t, int32_t, int32_t>>>();
  }

  std::string Slice() {
    return m_proxy.getProperty("Slice")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ControlGroup() {
    return m_proxy.getProperty("ControlGroup")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t ControlGroupId() {
    return m_proxy.getProperty("ControlGroupId")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryCurrent() {
    return m_proxy.getProperty("MemoryCurrent")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryPeak() {
    return m_proxy.getProperty("MemoryPeak")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemorySwapCurrent() {
    return m_proxy.getProperty("MemorySwapCurrent")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemorySwapPeak() {
    return m_proxy.getProperty("MemorySwapPeak")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryZSwapCurrent() {
    return m_proxy.getProperty("MemoryZSwapCurrent")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryAvailable() {
    return m_proxy.getProperty("MemoryAvailable")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t EffectiveMemoryMax() {
    return m_proxy.getProperty("EffectiveMemoryMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t EffectiveMemoryHigh() {
    return m_proxy.getProperty("EffectiveMemoryHigh")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t CPUUsageNSec() {
    return m_proxy.getProperty("CPUUsageNSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::vector<uint8_t> EffectiveCPUs() {
    return m_proxy.getProperty("EffectiveCPUs")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  std::vector<uint8_t> EffectiveMemoryNodes() {
    return m_proxy.getProperty("EffectiveMemoryNodes")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  uint64_t TasksCurrent() {
    return m_proxy.getProperty("TasksCurrent")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t EffectiveTasksMax() {
    return m_proxy.getProperty("EffectiveTasksMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IPIngressBytes() {
    return m_proxy.getProperty("IPIngressBytes")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IPIngressPackets() {
    return m_proxy.getProperty("IPIngressPackets")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IPEgressBytes() {
    return m_proxy.getProperty("IPEgressBytes")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IPEgressPackets() {
    return m_proxy.getProperty("IPEgressPackets")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IOReadBytes() {
    return m_proxy.getProperty("IOReadBytes")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IOReadOperations() {
    return m_proxy.getProperty("IOReadOperations")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IOWriteBytes() {
    return m_proxy.getProperty("IOWriteBytes")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t IOWriteOperations() {
    return m_proxy.getProperty("IOWriteOperations")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  bool Delegate() {
    return m_proxy.getProperty("Delegate")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::vector<std::string> DelegateControllers() {
    return m_proxy.getProperty("DelegateControllers")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::string DelegateSubgroup() {
    return m_proxy.getProperty("DelegateSubgroup")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool CPUAccounting() {
    return m_proxy.getProperty("CPUAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t CPUWeight() {
    return m_proxy.getProperty("CPUWeight")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupCPUWeight() {
    return m_proxy.getProperty("StartupCPUWeight")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t CPUShares() {
    return m_proxy.getProperty("CPUShares")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupCPUShares() {
    return m_proxy.getProperty("StartupCPUShares")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t CPUQuotaPerSecUSec() {
    return m_proxy.getProperty("CPUQuotaPerSecUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t CPUQuotaPeriodUSec() {
    return m_proxy.getProperty("CPUQuotaPeriodUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::vector<uint8_t> AllowedCPUs() {
    return m_proxy.getProperty("AllowedCPUs")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  std::vector<uint8_t> StartupAllowedCPUs() {
    return m_proxy.getProperty("StartupAllowedCPUs")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  std::vector<uint8_t> AllowedMemoryNodes() {
    return m_proxy.getProperty("AllowedMemoryNodes")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  std::vector<uint8_t> StartupAllowedMemoryNodes() {
    return m_proxy.getProperty("StartupAllowedMemoryNodes")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  bool IOAccounting() {
    return m_proxy.getProperty("IOAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t IOWeight() {
    return m_proxy.getProperty("IOWeight")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupIOWeight() {
    return m_proxy.getProperty("StartupIOWeight")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> IODeviceWeight() {
    return m_proxy.getProperty("IODeviceWeight")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> IOReadBandwidthMax() {
    return m_proxy.getProperty("IOReadBandwidthMax")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> IOWriteBandwidthMax() {
    return m_proxy.getProperty("IOWriteBandwidthMax")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> IOReadIOPSMax() {
    return m_proxy.getProperty("IOReadIOPSMax")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> IOWriteIOPSMax() {
    return m_proxy.getProperty("IOWriteIOPSMax")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>>
  IODeviceLatencyTargetUSec() {
    return m_proxy.getProperty("IODeviceLatencyTargetUSec")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  bool BlockIOAccounting() {
    return m_proxy.getProperty("BlockIOAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t BlockIOWeight() {
    return m_proxy.getProperty("BlockIOWeight")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupBlockIOWeight() {
    return m_proxy.getProperty("StartupBlockIOWeight")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> BlockIODeviceWeight() {
    return m_proxy.getProperty("BlockIODeviceWeight")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> BlockIOReadBandwidth() {
    return m_proxy.getProperty("BlockIOReadBandwidth")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, uint64_t>> BlockIOWriteBandwidth() {
    return m_proxy.getProperty("BlockIOWriteBandwidth")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, uint64_t>>>();
  }

  bool MemoryAccounting() {
    return m_proxy.getProperty("MemoryAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t DefaultMemoryLow() {
    return m_proxy.getProperty("DefaultMemoryLow")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultStartupMemoryLow() {
    return m_proxy.getProperty("DefaultStartupMemoryLow")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultMemoryMin() {
    return m_proxy.getProperty("DefaultMemoryMin")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryMin() {
    return m_proxy.getProperty("MemoryMin")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryLow() {
    return m_proxy.getProperty("MemoryLow")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupMemoryLow() {
    return m_proxy.getProperty("StartupMemoryLow")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryHigh() {
    return m_proxy.getProperty("MemoryHigh")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupMemoryHigh() {
    return m_proxy.getProperty("StartupMemoryHigh")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryMax() {
    return m_proxy.getProperty("MemoryMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupMemoryMax() {
    return m_proxy.getProperty("StartupMemoryMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemorySwapMax() {
    return m_proxy.getProperty("MemorySwapMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupMemorySwapMax() {
    return m_proxy.getProperty("StartupMemorySwapMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t MemoryZSwapMax() {
    return m_proxy.getProperty("MemoryZSwapMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t StartupMemoryZSwapMax() {
    return m_proxy.getProperty("StartupMemoryZSwapMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  bool MemoryZSwapWriteback() {
    return m_proxy.getProperty("MemoryZSwapWriteback")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t MemoryLimit() {
    return m_proxy.getProperty("MemoryLimit")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::string DevicePolicy() {
    return m_proxy.getProperty("DevicePolicy")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<sdbus::Struct<std::string, std::string>> DeviceAllow() {
    return m_proxy.getProperty("DeviceAllow")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string>>>();
  }

  bool TasksAccounting() {
    return m_proxy.getProperty("TasksAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t TasksMax() {
    return m_proxy.getProperty("TasksMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  bool IPAccounting() {
    return m_proxy.getProperty("IPAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::vector<sdbus::Struct<int32_t, std::vector<uint8_t>, uint32_t>>
  IPAddressAllow() {
    return m_proxy.getProperty("IPAddressAllow")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<int32_t, std::vector<uint8_t>, uint32_t>>>();
  }

  std::vector<sdbus::Struct<int32_t, std::vector<uint8_t>, uint32_t>>
  IPAddressDeny() {
    return m_proxy.getProperty("IPAddressDeny")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<int32_t, std::vector<uint8_t>, uint32_t>>>();
  }

  std::vector<std::string> IPIngressFilterPath() {
    return m_proxy.getProperty("IPIngressFilterPath")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> IPEgressFilterPath() {
    return m_proxy.getProperty("IPEgressFilterPath")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> DisableControllers() {
    return m_proxy.getProperty("DisableControllers")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::string ManagedOOMSwap() {
    return m_proxy.getProperty("ManagedOOMSwap")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ManagedOOMMemoryPressure() {
    return m_proxy.getProperty("ManagedOOMMemoryPressure")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint32_t ManagedOOMMemoryPressureLimit() {
    return m_proxy.getProperty("ManagedOOMMemoryPressureLimit")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::string ManagedOOMPreference() {
    return m_proxy.getProperty("ManagedOOMPreference")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<sdbus::Struct<std::string, std::string>> BPFProgram() {
    return m_proxy.getProperty("BPFProgram")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string>>>();
  }

  std::vector<sdbus::Struct<int32_t, int32_t, uint16_t, uint16_t>>
  SocketBindAllow() {
    return m_proxy.getProperty("SocketBindAllow")
        .onInterface(INTERFACE_NAME)
        .get<
            std::vector<sdbus::Struct<int32_t, int32_t, uint16_t, uint16_t>>>();
  }

  std::vector<sdbus::Struct<int32_t, int32_t, uint16_t, uint16_t>>
  SocketBindDeny() {
    return m_proxy.getProperty("SocketBindDeny")
        .onInterface(INTERFACE_NAME)
        .get<
            std::vector<sdbus::Struct<int32_t, int32_t, uint16_t, uint16_t>>>();
  }

  sdbus::Struct<bool, std::vector<std::string>> RestrictNetworkInterfaces() {
    return m_proxy.getProperty("RestrictNetworkInterfaces")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::vector<std::string>>>();
  }

  std::string MemoryPressureWatch() {
    return m_proxy.getProperty("MemoryPressureWatch")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t MemoryPressureThresholdUSec() {
    return m_proxy.getProperty("MemoryPressureThresholdUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::vector<sdbus::Struct<int32_t, int32_t, std::string, std::string>>
  NFTSet() {
    return m_proxy.getProperty("NFTSet")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<int32_t, int32_t, std::string, std::string>>>();
  }

  bool CoredumpReceive() {
    return m_proxy.getProperty("CoredumpReceive")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::vector<std::string> Environment() {
    return m_proxy.getProperty("Environment")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<sdbus::Struct<std::string, bool>> EnvironmentFiles() {
    return m_proxy.getProperty("EnvironmentFiles")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, bool>>>();
  }

  std::vector<std::string> PassEnvironment() {
    return m_proxy.getProperty("PassEnvironment")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> UnsetEnvironment() {
    return m_proxy.getProperty("UnsetEnvironment")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  uint32_t UMask() {
    return m_proxy.getProperty("UMask")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint64_t LimitCPU() {
    return m_proxy.getProperty("LimitCPU")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitCPUSoft() {
    return m_proxy.getProperty("LimitCPUSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitFSIZE() {
    return m_proxy.getProperty("LimitFSIZE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitFSIZESoft() {
    return m_proxy.getProperty("LimitFSIZESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitDATA() {
    return m_proxy.getProperty("LimitDATA")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitDATASoft() {
    return m_proxy.getProperty("LimitDATASoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitSTACK() {
    return m_proxy.getProperty("LimitSTACK")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitSTACKSoft() {
    return m_proxy.getProperty("LimitSTACKSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitCORE() {
    return m_proxy.getProperty("LimitCORE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitCORESoft() {
    return m_proxy.getProperty("LimitCORESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitRSS() {
    return m_proxy.getProperty("LimitRSS")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitRSSSoft() {
    return m_proxy.getProperty("LimitRSSSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitNOFILE() {
    return m_proxy.getProperty("LimitNOFILE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitNOFILESoft() {
    return m_proxy.getProperty("LimitNOFILESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitAS() {
    return m_proxy.getProperty("LimitAS")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitASSoft() {
    return m_proxy.getProperty("LimitASSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitNPROC() {
    return m_proxy.getProperty("LimitNPROC")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitNPROCSoft() {
    return m_proxy.getProperty("LimitNPROCSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitMEMLOCK() {
    return m_proxy.getProperty("LimitMEMLOCK")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitMEMLOCKSoft() {
    return m_proxy.getProperty("LimitMEMLOCKSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitLOCKS() {
    return m_proxy.getProperty("LimitLOCKS")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitLOCKSSoft() {
    return m_proxy.getProperty("LimitLOCKSSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitSIGPENDING() {
    return m_proxy.getProperty("LimitSIGPENDING")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitSIGPENDINGSoft() {
    return m_proxy.getProperty("LimitSIGPENDINGSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitMSGQUEUE() {
    return m_proxy.getProperty("LimitMSGQUEUE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitMSGQUEUESoft() {
    return m_proxy.getProperty("LimitMSGQUEUESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitNICE() {
    return m_proxy.getProperty("LimitNICE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitNICESoft() {
    return m_proxy.getProperty("LimitNICESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitRTPRIO() {
    return m_proxy.getProperty("LimitRTPRIO")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitRTPRIOSoft() {
    return m_proxy.getProperty("LimitRTPRIOSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitRTTIME() {
    return m_proxy.getProperty("LimitRTTIME")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LimitRTTIMESoft() {
    return m_proxy.getProperty("LimitRTTIMESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::string WorkingDirectory() {
    return m_proxy.getProperty("WorkingDirectory")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string RootDirectory() {
    return m_proxy.getProperty("RootDirectory")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string RootImage() {
    return m_proxy.getProperty("RootImage")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<sdbus::Struct<std::string, std::string>> RootImageOptions() {
    return m_proxy.getProperty("RootImageOptions")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string>>>();
  }

  std::vector<uint8_t> RootHash() {
    return m_proxy.getProperty("RootHash")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  std::string RootHashPath() {
    return m_proxy.getProperty("RootHashPath")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<uint8_t> RootHashSignature() {
    return m_proxy.getProperty("RootHashSignature")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  std::string RootHashSignaturePath() {
    return m_proxy.getProperty("RootHashSignaturePath")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string RootVerity() {
    return m_proxy.getProperty("RootVerity")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool RootEphemeral() {
    return m_proxy.getProperty("RootEphemeral")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::vector<std::string> ExtensionDirectories() {
    return m_proxy.getProperty("ExtensionDirectories")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<
      sdbus::Struct<std::string,
                    bool,
                    std::vector<sdbus::Struct<std::string, std::string>>>>
  ExtensionImages() {
    return m_proxy.getProperty("ExtensionImages")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, bool,
            std::vector<sdbus::Struct<std::string, std::string>>>>>();
  }

  std::vector<
      sdbus::Struct<std::string,
                    std::string,
                    bool,
                    std::vector<sdbus::Struct<std::string, std::string>>>>
  MountImages() {
    return m_proxy.getProperty("MountImages")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<
            std::string, std::string, bool,
            std::vector<sdbus::Struct<std::string, std::string>>>>>();
  }

  int32_t OOMScoreAdjust() {
    return m_proxy.getProperty("OOMScoreAdjust")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  uint64_t CoredumpFilter() {
    return m_proxy.getProperty("CoredumpFilter")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  int32_t Nice() {
    return m_proxy.getProperty("Nice")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t IOSchedulingClass() {
    return m_proxy.getProperty("IOSchedulingClass")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t IOSchedulingPriority() {
    return m_proxy.getProperty("IOSchedulingPriority")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t CPUSchedulingPolicy() {
    return m_proxy.getProperty("CPUSchedulingPolicy")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t CPUSchedulingPriority() {
    return m_proxy.getProperty("CPUSchedulingPriority")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  std::vector<uint8_t> CPUAffinity() {
    return m_proxy.getProperty("CPUAffinity")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  bool CPUAffinityFromNUMA() {
    return m_proxy.getProperty("CPUAffinityFromNUMA")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  int32_t NUMAPolicy() {
    return m_proxy.getProperty("NUMAPolicy")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  std::vector<uint8_t> NUMAMask() {
    return m_proxy.getProperty("NUMAMask")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  uint64_t TimerSlackNSec() {
    return m_proxy.getProperty("TimerSlackNSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  bool CPUSchedulingResetOnFork() {
    return m_proxy.getProperty("CPUSchedulingResetOnFork")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool NonBlocking() {
    return m_proxy.getProperty("NonBlocking")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::string StandardInput() {
    return m_proxy.getProperty("StandardInput")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string StandardInputFileDescriptorName() {
    return m_proxy.getProperty("StandardInputFileDescriptorName")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<uint8_t> StandardInputData() {
    return m_proxy.getProperty("StandardInputData")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<uint8_t>>();
  }

  std::string StandardOutput() {
    return m_proxy.getProperty("StandardOutput")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string StandardOutputFileDescriptorName() {
    return m_proxy.getProperty("StandardOutputFileDescriptorName")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string StandardError() {
    return m_proxy.getProperty("StandardError")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string StandardErrorFileDescriptorName() {
    return m_proxy.getProperty("StandardErrorFileDescriptorName")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string TTYPath() {
    return m_proxy.getProperty("TTYPath")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool TTYReset() {
    return m_proxy.getProperty("TTYReset")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool TTYVHangup() {
    return m_proxy.getProperty("TTYVHangup")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool TTYVTDisallocate() {
    return m_proxy.getProperty("TTYVTDisallocate")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint16_t TTYRows() {
    return m_proxy.getProperty("TTYRows")
        .onInterface(INTERFACE_NAME)
        .get<uint16_t>();
  }

  uint16_t TTYColumns() {
    return m_proxy.getProperty("TTYColumns")
        .onInterface(INTERFACE_NAME)
        .get<uint16_t>();
  }

  int32_t SyslogPriority() {
    return m_proxy.getProperty("SyslogPriority")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  std::string SyslogIdentifier() {
    return m_proxy.getProperty("SyslogIdentifier")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool SyslogLevelPrefix() {
    return m_proxy.getProperty("SyslogLevelPrefix")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  int32_t SyslogLevel() {
    return m_proxy.getProperty("SyslogLevel")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t SyslogFacility() {
    return m_proxy.getProperty("SyslogFacility")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t LogLevelMax() {
    return m_proxy.getProperty("LogLevelMax")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  uint64_t LogRateLimitIntervalUSec() {
    return m_proxy.getProperty("LogRateLimitIntervalUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint32_t LogRateLimitBurst() {
    return m_proxy.getProperty("LogRateLimitBurst")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::vector<std::vector<uint8_t>> LogExtraFields() {
    return m_proxy.getProperty("LogExtraFields")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::vector<uint8_t>>>();
  }

  std::vector<sdbus::Struct<bool, std::string>> LogFilterPatterns() {
    return m_proxy.getProperty("LogFilterPatterns")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<bool, std::string>>>();
  }

  std::string LogNamespace() {
    return m_proxy.getProperty("LogNamespace")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  int32_t SecureBits() {
    return m_proxy.getProperty("SecureBits")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  uint64_t CapabilityBoundingSet() {
    return m_proxy.getProperty("CapabilityBoundingSet")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t AmbientCapabilities() {
    return m_proxy.getProperty("AmbientCapabilities")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::string User() {
    return m_proxy.getProperty("User")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Group() {
    return m_proxy.getProperty("Group")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool DynamicUser() {
    return m_proxy.getProperty("DynamicUser")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool SetLoginEnvironment() {
    return m_proxy.getProperty("SetLoginEnvironment")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool RemoveIPC() {
    return m_proxy.getProperty("RemoveIPC")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::vector<sdbus::Struct<std::string, std::vector<uint8_t>>>
  SetCredential() {
    return m_proxy.getProperty("SetCredential")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::vector<uint8_t>>>>();
  }

  std::vector<sdbus::Struct<std::string, std::vector<uint8_t>>>
  SetCredentialEncrypted() {
    return m_proxy.getProperty("SetCredentialEncrypted")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::vector<uint8_t>>>>();
  }

  std::vector<sdbus::Struct<std::string, std::string>> LoadCredential() {
    return m_proxy.getProperty("LoadCredential")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string>>>();
  }

  std::vector<sdbus::Struct<std::string, std::string>>
  LoadCredentialEncrypted() {
    return m_proxy.getProperty("LoadCredentialEncrypted")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string>>>();
  }

  std::vector<std::string> ImportCredential() {
    return m_proxy.getProperty("ImportCredential")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> SupplementaryGroups() {
    return m_proxy.getProperty("SupplementaryGroups")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::string PAMName() {
    return m_proxy.getProperty("PAMName")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<std::string> ReadWritePaths() {
    return m_proxy.getProperty("ReadWritePaths")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> ReadOnlyPaths() {
    return m_proxy.getProperty("ReadOnlyPaths")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> InaccessiblePaths() {
    return m_proxy.getProperty("InaccessiblePaths")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> ExecPaths() {
    return m_proxy.getProperty("ExecPaths")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> NoExecPaths() {
    return m_proxy.getProperty("NoExecPaths")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<std::string> ExecSearchPath() {
    return m_proxy.getProperty("ExecSearchPath")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  uint64_t MountFlags() {
    return m_proxy.getProperty("MountFlags")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  bool PrivateTmp() {
    return m_proxy.getProperty("PrivateTmp")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool PrivateDevices() {
    return m_proxy.getProperty("PrivateDevices")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool ProtectClock() {
    return m_proxy.getProperty("ProtectClock")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool ProtectKernelTunables() {
    return m_proxy.getProperty("ProtectKernelTunables")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool ProtectKernelModules() {
    return m_proxy.getProperty("ProtectKernelModules")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool ProtectKernelLogs() {
    return m_proxy.getProperty("ProtectKernelLogs")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool ProtectControlGroups() {
    return m_proxy.getProperty("ProtectControlGroups")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool PrivateNetwork() {
    return m_proxy.getProperty("PrivateNetwork")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool PrivateUsers() {
    return m_proxy.getProperty("PrivateUsers")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool PrivateMounts() {
    return m_proxy.getProperty("PrivateMounts")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool PrivateIPC() {
    return m_proxy.getProperty("PrivateIPC")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::string ProtectHome() {
    return m_proxy.getProperty("ProtectHome")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ProtectSystem() {
    return m_proxy.getProperty("ProtectSystem")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool SameProcessGroup() {
    return m_proxy.getProperty("SameProcessGroup")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::string UtmpIdentifier() {
    return m_proxy.getProperty("UtmpIdentifier")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string UtmpMode() {
    return m_proxy.getProperty("UtmpMode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  sdbus::Struct<bool, std::string> SELinuxContext() {
    return m_proxy.getProperty("SELinuxContext")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::string>>();
  }

  sdbus::Struct<bool, std::string> AppArmorProfile() {
    return m_proxy.getProperty("AppArmorProfile")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::string>>();
  }

  sdbus::Struct<bool, std::string> SmackProcessLabel() {
    return m_proxy.getProperty("SmackProcessLabel")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::string>>();
  }

  bool IgnoreSIGPIPE() {
    return m_proxy.getProperty("IgnoreSIGPIPE")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool NoNewPrivileges() {
    return m_proxy.getProperty("NoNewPrivileges")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  sdbus::Struct<bool, std::vector<std::string>> SystemCallFilter() {
    return m_proxy.getProperty("SystemCallFilter")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::vector<std::string>>>();
  }

  std::vector<std::string> SystemCallArchitectures() {
    return m_proxy.getProperty("SystemCallArchitectures")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  int32_t SystemCallErrorNumber() {
    return m_proxy.getProperty("SystemCallErrorNumber")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  sdbus::Struct<bool, std::vector<std::string>> SystemCallLog() {
    return m_proxy.getProperty("SystemCallLog")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::vector<std::string>>>();
  }

  std::string Personality() {
    return m_proxy.getProperty("Personality")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool LockPersonality() {
    return m_proxy.getProperty("LockPersonality")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  sdbus::Struct<bool, std::vector<std::string>> RestrictAddressFamilies() {
    return m_proxy.getProperty("RestrictAddressFamilies")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::vector<std::string>>>();
  }

  std::vector<sdbus::Struct<std::string, std::string, uint64_t>>
  RuntimeDirectorySymlink() {
    return m_proxy.getProperty("RuntimeDirectorySymlink")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string, uint64_t>>>();
  }

  std::string RuntimeDirectoryPreserve() {
    return m_proxy.getProperty("RuntimeDirectoryPreserve")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint32_t RuntimeDirectoryMode() {
    return m_proxy.getProperty("RuntimeDirectoryMode")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::vector<std::string> RuntimeDirectory() {
    return m_proxy.getProperty("RuntimeDirectory")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<sdbus::Struct<std::string, std::string, uint64_t>>
  StateDirectorySymlink() {
    return m_proxy.getProperty("StateDirectorySymlink")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string, uint64_t>>>();
  }

  uint32_t StateDirectoryMode() {
    return m_proxy.getProperty("StateDirectoryMode")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::vector<std::string> StateDirectory() {
    return m_proxy.getProperty("StateDirectory")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<sdbus::Struct<std::string, std::string, uint64_t>>
  CacheDirectorySymlink() {
    return m_proxy.getProperty("CacheDirectorySymlink")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string, uint64_t>>>();
  }

  uint32_t CacheDirectoryMode() {
    return m_proxy.getProperty("CacheDirectoryMode")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::vector<std::string> CacheDirectory() {
    return m_proxy.getProperty("CacheDirectory")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::vector<sdbus::Struct<std::string, std::string, uint64_t>>
  LogsDirectorySymlink() {
    return m_proxy.getProperty("LogsDirectorySymlink")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string, uint64_t>>>();
  }

  uint32_t LogsDirectoryMode() {
    return m_proxy.getProperty("LogsDirectoryMode")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::vector<std::string> LogsDirectory() {
    return m_proxy.getProperty("LogsDirectory")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  uint32_t ConfigurationDirectoryMode() {
    return m_proxy.getProperty("ConfigurationDirectoryMode")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::vector<std::string> ConfigurationDirectory() {
    return m_proxy.getProperty("ConfigurationDirectory")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  uint64_t TimeoutCleanUSec() {
    return m_proxy.getProperty("TimeoutCleanUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  bool MemoryDenyWriteExecute() {
    return m_proxy.getProperty("MemoryDenyWriteExecute")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool RestrictRealtime() {
    return m_proxy.getProperty("RestrictRealtime")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool RestrictSUIDSGID() {
    return m_proxy.getProperty("RestrictSUIDSGID")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t RestrictNamespaces() {
    return m_proxy.getProperty("RestrictNamespaces")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  sdbus::Struct<bool, std::vector<std::string>> RestrictFileSystems() {
    return m_proxy.getProperty("RestrictFileSystems")
        .onInterface(INTERFACE_NAME)
        .get<sdbus::Struct<bool, std::vector<std::string>>>();
  }

  std::vector<sdbus::Struct<std::string, std::string, bool, uint64_t>>
  BindPaths() {
    return m_proxy.getProperty("BindPaths")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::string, bool, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, std::string, bool, uint64_t>>
  BindReadOnlyPaths() {
    return m_proxy.getProperty("BindReadOnlyPaths")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<
            sdbus::Struct<std::string, std::string, bool, uint64_t>>>();
  }

  std::vector<sdbus::Struct<std::string, std::string>> TemporaryFileSystem() {
    return m_proxy.getProperty("TemporaryFileSystem")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<sdbus::Struct<std::string, std::string>>>();
  }

  bool MountAPIVFS() {
    return m_proxy.getProperty("MountAPIVFS")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::string KeyringMode() {
    return m_proxy.getProperty("KeyringMode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ProtectProc() {
    return m_proxy.getProperty("ProtectProc")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ProcSubset() {
    return m_proxy.getProperty("ProcSubset")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  bool ProtectHostname() {
    return m_proxy.getProperty("ProtectHostname")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool MemoryKSM() {
    return m_proxy.getProperty("MemoryKSM")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::string NetworkNamespacePath() {
    return m_proxy.getProperty("NetworkNamespacePath")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string IPCNamespacePath() {
    return m_proxy.getProperty("IPCNamespacePath")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string RootImagePolicy() {
    return m_proxy.getProperty("RootImagePolicy")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string MountImagePolicy() {
    return m_proxy.getProperty("MountImagePolicy")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ExtensionImagePolicy() {
    return m_proxy.getProperty("ExtensionImagePolicy")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string KillMode() {
    return m_proxy.getProperty("KillMode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  int32_t KillSignal() {
    return m_proxy.getProperty("KillSignal")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t RestartKillSignal() {
    return m_proxy.getProperty("RestartKillSignal")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  int32_t FinalKillSignal() {
    return m_proxy.getProperty("FinalKillSignal")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  bool SendSIGKILL() {
    return m_proxy.getProperty("SendSIGKILL")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool SendSIGHUP() {
    return m_proxy.getProperty("SendSIGHUP")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  int32_t WatchdogSignal() {
    return m_proxy.getProperty("WatchdogSignal")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace systemd1
}  // namespace freedesktop
}  // namespace org

#endif
