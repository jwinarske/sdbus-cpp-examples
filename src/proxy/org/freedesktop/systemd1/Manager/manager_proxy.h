
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_freedesktop_systemd1_Manager_manager_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_freedesktop_systemd1_Manager_manager_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace systemd1 {

class Manager_proxy {
 public:
  static constexpr const char* INTERFACE_NAME =
      "org.freedesktop.systemd1.Manager";

 protected:
  Manager_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Manager_proxy(const Manager_proxy&) = delete;
  Manager_proxy& operator=(const Manager_proxy&) = delete;
  Manager_proxy(Manager_proxy&&) = delete;
  Manager_proxy& operator=(Manager_proxy&&) = delete;

  ~Manager_proxy() = default;

  void registerProxy() {
    m_proxy.uponSignal("UnitNew")
        .onInterface(INTERFACE_NAME)
        .call([this](const std::string& id, const sdbus::ObjectPath& unit) {
          this->onUnitNew(id, unit);
        });
    m_proxy.uponSignal("UnitRemoved")
        .onInterface(INTERFACE_NAME)
        .call([this](const std::string& id, const sdbus::ObjectPath& unit) {
          this->onUnitRemoved(id, unit);
        });
    m_proxy.uponSignal("JobNew")
        .onInterface(INTERFACE_NAME)
        .call(
            [this](const uint32_t& id, const sdbus::ObjectPath& job,
                   const std::string& unit) { this->onJobNew(id, job, unit); });
    m_proxy.uponSignal("JobRemoved")
        .onInterface(INTERFACE_NAME)
        .call([this](const uint32_t& id, const sdbus::ObjectPath& job,
                     const std::string& unit, const std::string& result) {
          this->onJobRemoved(id, job, unit, result);
        });
    m_proxy.uponSignal("StartupFinished")
        .onInterface(INTERFACE_NAME)
        .call([this](const uint64_t& firmware, const uint64_t& loader,
                     const uint64_t& kernel, const uint64_t& initrd,
                     const uint64_t& userspace, const uint64_t& total) {
          this->onStartupFinished(firmware, loader, kernel, initrd, userspace,
                                  total);
        });
    m_proxy.uponSignal("UnitFilesChanged")
        .onInterface(INTERFACE_NAME)
        .call([this]() { this->onUnitFilesChanged(); });
    m_proxy.uponSignal("Reloading")
        .onInterface(INTERFACE_NAME)
        .call([this](const bool& active) { this->onReloading(active); });
  }

  virtual void onUnitNew(const std::string& id,
                         const sdbus::ObjectPath& unit) = 0;
  virtual void onUnitRemoved(const std::string& id,
                             const sdbus::ObjectPath& unit) = 0;
  virtual void onJobNew(const uint32_t& id,
                        const sdbus::ObjectPath& job,
                        const std::string& unit) = 0;
  virtual void onJobRemoved(const uint32_t& id,
                            const sdbus::ObjectPath& job,
                            const std::string& unit,
                            const std::string& result) = 0;
  virtual void onStartupFinished(const uint64_t& firmware,
                                 const uint64_t& loader,
                                 const uint64_t& kernel,
                                 const uint64_t& initrd,
                                 const uint64_t& userspace,
                                 const uint64_t& total) = 0;
  virtual void onUnitFilesChanged() = 0;
  virtual void onReloading(const bool& active) = 0;

 public:
  sdbus::ObjectPath GetUnit(const std::string& name) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("GetUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath GetUnitByPID(const uint32_t& pid) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("GetUnitByPID")
        .onInterface(INTERFACE_NAME)
        .withArguments(pid)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath GetUnitByInvocationID(
      const std::vector<uint8_t>& invocation_id) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("GetUnitByInvocationID")
        .onInterface(INTERFACE_NAME)
        .withArguments(invocation_id)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath GetUnitByControlGroup(const std::string& cgroup) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("GetUnitByControlGroup")
        .onInterface(INTERFACE_NAME)
        .withArguments(cgroup)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<sdbus::ObjectPath, std::string, std::vector<uint8_t>>
  GetUnitByPIDFD(const sdbus::UnixFd& pidfd) {
    std::tuple<sdbus::ObjectPath, std::string, std::vector<uint8_t>> result;
    m_proxy.callMethod("GetUnitByPIDFD")
        .onInterface(INTERFACE_NAME)
        .withArguments(pidfd)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath LoadUnit(const std::string& name) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("LoadUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath StartUnit(const std::string& name,
                              const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("StartUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath StartUnitWithFlags(const std::string& name,
                                       const std::string& mode,
                                       const uint64_t& flags) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("StartUnitWithFlags")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode, flags)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath StartUnitReplace(const std::string& old_unit,
                                     const std::string& new_unit,
                                     const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("StartUnitReplace")
        .onInterface(INTERFACE_NAME)
        .withArguments(old_unit, new_unit, mode)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath StopUnit(const std::string& name, const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("StopUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath ReloadUnit(const std::string& name,
                               const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("ReloadUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath RestartUnit(const std::string& name,
                                const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("RestartUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath TryRestartUnit(const std::string& name,
                                   const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("TryRestartUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath ReloadOrRestartUnit(const std::string& name,
                                        const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("ReloadOrRestartUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath ReloadOrTryRestartUnit(const std::string& name,
                                           const std::string& mode) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("ReloadOrTryRestartUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<uint32_t,
             sdbus::ObjectPath,
             std::string,
             sdbus::ObjectPath,
             std::string,
             std::vector<sdbus::Struct<uint32_t,
                                       sdbus::ObjectPath,
                                       std::string,
                                       sdbus::ObjectPath,
                                       std::string>>>
  EnqueueUnitJob(const std::string& name,
                 const std::string& job_type,
                 const std::string& job_mode) {
    std::tuple<
        uint32_t, sdbus::ObjectPath, std::string, sdbus::ObjectPath,
        std::string,
        std::vector<sdbus::Struct<uint32_t, sdbus::ObjectPath, std::string,
                                  sdbus::ObjectPath, std::string>>>
        result;
    m_proxy.callMethod("EnqueueUnitJob")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, job_type, job_mode)
        .storeResultsTo(result);
    return result;
  }

  void KillUnit(const std::string& name,
                const std::string& whom,
                const int32_t& signal) {
    m_proxy.callMethod("KillUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, whom, signal);
  }

  void QueueSignalUnit(const std::string& name,
                       const std::string& whom,
                       const int32_t& signal,
                       const int32_t& value) {
    m_proxy.callMethod("QueueSignalUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, whom, signal, value);
  }

  void CleanUnit(const std::string& name,
                 const std::vector<std::string>& mask) {
    m_proxy.callMethod("CleanUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mask);
  }

  void FreezeUnit(const std::string& name) {
    m_proxy.callMethod("FreezeUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name);
  }

  void ThawUnit(const std::string& name) {
    m_proxy.callMethod("ThawUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name);
  }

  void ResetFailedUnit(const std::string& name) {
    m_proxy.callMethod("ResetFailedUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name);
  }

  void SetUnitProperties(
      const std::string& name,
      const bool& runtime,
      const std::vector<sdbus::Struct<std::string, sdbus::Variant>>&
          properties) {
    m_proxy.callMethod("SetUnitProperties")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, runtime, properties);
  }

  void BindMountUnit(const std::string& name,
                     const std::string& source,
                     const std::string& destination,
                     const bool& read_only,
                     const bool& mkdir) {
    m_proxy.callMethod("BindMountUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, source, destination, read_only, mkdir);
  }

  void MountImageUnit(
      const std::string& name,
      const std::string& source,
      const std::string& destination,
      const bool& read_only,
      const bool& mkdir,
      const std::vector<sdbus::Struct<std::string, std::string>>& options) {
    m_proxy.callMethod("MountImageUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, source, destination, read_only, mkdir, options);
  }

  void RefUnit(const std::string& name) {
    m_proxy.callMethod("RefUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name);
  }

  void UnrefUnit(const std::string& name) {
    m_proxy.callMethod("UnrefUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name);
  }

  sdbus::ObjectPath StartTransientUnit(
      const std::string& name,
      const std::string& mode,
      const std::vector<sdbus::Struct<std::string, sdbus::Variant>>& properties,
      const std::vector<sdbus::Struct<
          std::string,
          std::vector<sdbus::Struct<std::string, sdbus::Variant>>>>& aux) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("StartTransientUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, mode, properties, aux)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, uint32_t, std::string>>
  GetUnitProcesses(const std::string& name) {
    std::vector<sdbus::Struct<std::string, uint32_t, std::string>> result;
    m_proxy.callMethod("GetUnitProcesses")
        .onInterface(INTERFACE_NAME)
        .withArguments(name)
        .storeResultsTo(result);
    return result;
  }

  void AttachProcessesToUnit(const std::string& unit_name,
                             const std::string& subcgroup,
                             const std::vector<uint32_t>& pids) {
    m_proxy.callMethod("AttachProcessesToUnit")
        .onInterface(INTERFACE_NAME)
        .withArguments(unit_name, subcgroup, pids);
  }

  void AbandonScope(const std::string& name) {
    m_proxy.callMethod("AbandonScope")
        .onInterface(INTERFACE_NAME)
        .withArguments(name);
  }

  sdbus::ObjectPath GetJob(const uint32_t& id) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("GetJob")
        .onInterface(INTERFACE_NAME)
        .withArguments(id)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<uint32_t,
                            std::string,
                            std::string,
                            std::string,
                            sdbus::ObjectPath,
                            sdbus::ObjectPath>>
  GetJobAfter(const uint32_t& id) {
    std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string,
                              sdbus::ObjectPath, sdbus::ObjectPath>>
        result;
    m_proxy.callMethod("GetJobAfter")
        .onInterface(INTERFACE_NAME)
        .withArguments(id)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<uint32_t,
                            std::string,
                            std::string,
                            std::string,
                            sdbus::ObjectPath,
                            sdbus::ObjectPath>>
  GetJobBefore(const uint32_t& id) {
    std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string,
                              sdbus::ObjectPath, sdbus::ObjectPath>>
        result;
    m_proxy.callMethod("GetJobBefore")
        .onInterface(INTERFACE_NAME)
        .withArguments(id)
        .storeResultsTo(result);
    return result;
  }

  void CancelJob(const uint32_t& id) {
    m_proxy.callMethod("CancelJob")
        .onInterface(INTERFACE_NAME)
        .withArguments(id);
  }

  void ClearJobs() {
    m_proxy.callMethod("ClearJobs").onInterface(INTERFACE_NAME);
  }

  void ResetFailed() {
    m_proxy.callMethod("ResetFailed").onInterface(INTERFACE_NAME);
  }

  void SetShowStatus(const std::string& mode) {
    m_proxy.callMethod("SetShowStatus")
        .onInterface(INTERFACE_NAME)
        .withArguments(mode);
  }

  std::vector<sdbus::Struct<std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            sdbus::ObjectPath,
                            uint32_t,
                            std::string,
                            sdbus::ObjectPath>>
  ListUnits() {
    std::vector<
        sdbus::Struct<std::string, std::string, std::string, std::string,
                      std::string, std::string, sdbus::ObjectPath, uint32_t,
                      std::string, sdbus::ObjectPath>>
        result;
    m_proxy.callMethod("ListUnits")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            sdbus::ObjectPath,
                            uint32_t,
                            std::string,
                            sdbus::ObjectPath>>
  ListUnitsFiltered(const std::vector<std::string>& states) {
    std::vector<
        sdbus::Struct<std::string, std::string, std::string, std::string,
                      std::string, std::string, sdbus::ObjectPath, uint32_t,
                      std::string, sdbus::ObjectPath>>
        result;
    m_proxy.callMethod("ListUnitsFiltered")
        .onInterface(INTERFACE_NAME)
        .withArguments(states)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            sdbus::ObjectPath,
                            uint32_t,
                            std::string,
                            sdbus::ObjectPath>>
  ListUnitsByPatterns(const std::vector<std::string>& states,
                      const std::vector<std::string>& patterns) {
    std::vector<
        sdbus::Struct<std::string, std::string, std::string, std::string,
                      std::string, std::string, sdbus::ObjectPath, uint32_t,
                      std::string, sdbus::ObjectPath>>
        result;
    m_proxy.callMethod("ListUnitsByPatterns")
        .onInterface(INTERFACE_NAME)
        .withArguments(states, patterns)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            std::string,
                            sdbus::ObjectPath,
                            uint32_t,
                            std::string,
                            sdbus::ObjectPath>>
  ListUnitsByNames(const std::vector<std::string>& names) {
    std::vector<
        sdbus::Struct<std::string, std::string, std::string, std::string,
                      std::string, std::string, sdbus::ObjectPath, uint32_t,
                      std::string, sdbus::ObjectPath>>
        result;
    m_proxy.callMethod("ListUnitsByNames")
        .onInterface(INTERFACE_NAME)
        .withArguments(names)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<uint32_t,
                            std::string,
                            std::string,
                            std::string,
                            sdbus::ObjectPath,
                            sdbus::ObjectPath>>
  ListJobs() {
    std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string,
                              sdbus::ObjectPath, sdbus::ObjectPath>>
        result;
    m_proxy.callMethod("ListJobs")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  void Subscribe() {
    m_proxy.callMethod("Subscribe").onInterface(INTERFACE_NAME);
  }

  void Unsubscribe() {
    m_proxy.callMethod("Unsubscribe").onInterface(INTERFACE_NAME);
  }

  std::string Dump() {
    std::string result;
    m_proxy.callMethod("Dump")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::string DumpUnitsMatchingPatterns(
      const std::vector<std::string>& patterns) {
    std::string result;
    m_proxy.callMethod("DumpUnitsMatchingPatterns")
        .onInterface(INTERFACE_NAME)
        .withArguments(patterns)
        .storeResultsTo(result);
    return result;
  }

  sdbus::UnixFd DumpByFileDescriptor() {
    sdbus::UnixFd result;
    m_proxy.callMethod("DumpByFileDescriptor")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  sdbus::UnixFd DumpUnitsMatchingPatternsByFileDescriptor(
      const std::vector<std::string>& patterns) {
    sdbus::UnixFd result;
    m_proxy.callMethod("DumpUnitsMatchingPatternsByFileDescriptor")
        .onInterface(INTERFACE_NAME)
        .withArguments(patterns)
        .storeResultsTo(result);
    return result;
  }

  void Reload() { m_proxy.callMethod("Reload").onInterface(INTERFACE_NAME); }

  void Reexecute() {
    m_proxy.callMethod("Reexecute")
        .onInterface(INTERFACE_NAME)
        .dontExpectReply();
  }

  void Exit() { m_proxy.callMethod("Exit").onInterface(INTERFACE_NAME); }

  void Reboot() { m_proxy.callMethod("Reboot").onInterface(INTERFACE_NAME); }

  void SoftReboot(const std::string& new_root) {
    m_proxy.callMethod("SoftReboot")
        .onInterface(INTERFACE_NAME)
        .withArguments(new_root);
  }

  void PowerOff() {
    m_proxy.callMethod("PowerOff").onInterface(INTERFACE_NAME);
  }

  void Halt() { m_proxy.callMethod("Halt").onInterface(INTERFACE_NAME); }

  void KExec() { m_proxy.callMethod("KExec").onInterface(INTERFACE_NAME); }

  void SwitchRoot(const std::string& new_root, const std::string& init) {
    m_proxy.callMethod("SwitchRoot")
        .onInterface(INTERFACE_NAME)
        .withArguments(new_root, init);
  }

  void SetEnvironment(const std::vector<std::string>& assignments) {
    m_proxy.callMethod("SetEnvironment")
        .onInterface(INTERFACE_NAME)
        .withArguments(assignments);
  }

  void UnsetEnvironment(const std::vector<std::string>& names) {
    m_proxy.callMethod("UnsetEnvironment")
        .onInterface(INTERFACE_NAME)
        .withArguments(names);
  }

  void UnsetAndSetEnvironment(const std::vector<std::string>& names,
                              const std::vector<std::string>& assignments) {
    m_proxy.callMethod("UnsetAndSetEnvironment")
        .onInterface(INTERFACE_NAME)
        .withArguments(names, assignments);
  }

  std::vector<sdbus::ObjectPath> EnqueueMarkedJobs() {
    std::vector<sdbus::ObjectPath> result;
    m_proxy.callMethod("EnqueueMarkedJobs")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string>> ListUnitFiles() {
    std::vector<sdbus::Struct<std::string, std::string>> result;
    m_proxy.callMethod("ListUnitFiles")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string>> ListUnitFilesByPatterns(
      const std::vector<std::string>& states,
      const std::vector<std::string>& patterns) {
    std::vector<sdbus::Struct<std::string, std::string>> result;
    m_proxy.callMethod("ListUnitFilesByPatterns")
        .onInterface(INTERFACE_NAME)
        .withArguments(states, patterns)
        .storeResultsTo(result);
    return result;
  }

  std::string GetUnitFileState(const std::string& file) {
    std::string result;
    m_proxy.callMethod("GetUnitFileState")
        .onInterface(INTERFACE_NAME)
        .withArguments(file)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<bool,
             std::vector<sdbus::Struct<std::string, std::string, std::string>>>
  EnableUnitFiles(const std::vector<std::string>& files,
                  const bool& runtime,
                  const bool& force) {
    std::tuple<
        bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>>
        result;
    m_proxy.callMethod("EnableUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  DisableUnitFiles(const std::vector<std::string>& files, const bool& runtime) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("DisableUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, runtime)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<bool,
             std::vector<sdbus::Struct<std::string, std::string, std::string>>>
  EnableUnitFilesWithFlags(const std::vector<std::string>& files,
                           const uint64_t& flags) {
    std::tuple<
        bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>>
        result;
    m_proxy.callMethod("EnableUnitFilesWithFlags")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, flags)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  DisableUnitFilesWithFlags(const std::vector<std::string>& files,
                            const uint64_t& flags) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("DisableUnitFilesWithFlags")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, flags)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<bool,
             std::vector<sdbus::Struct<std::string, std::string, std::string>>>
  DisableUnitFilesWithFlagsAndInstallInfo(const std::vector<std::string>& files,
                                          const uint64_t& flags) {
    std::tuple<
        bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>>
        result;
    m_proxy.callMethod("DisableUnitFilesWithFlagsAndInstallInfo")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, flags)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<bool,
             std::vector<sdbus::Struct<std::string, std::string, std::string>>>
  ReenableUnitFiles(const std::vector<std::string>& files,
                    const bool& runtime,
                    const bool& force) {
    std::tuple<
        bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>>
        result;
    m_proxy.callMethod("ReenableUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  LinkUnitFiles(const std::vector<std::string>& files,
                const bool& runtime,
                const bool& force) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("LinkUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<bool,
             std::vector<sdbus::Struct<std::string, std::string, std::string>>>
  PresetUnitFiles(const std::vector<std::string>& files,
                  const bool& runtime,
                  const bool& force) {
    std::tuple<
        bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>>
        result;
    m_proxy.callMethod("PresetUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::tuple<bool,
             std::vector<sdbus::Struct<std::string, std::string, std::string>>>
  PresetUnitFilesWithMode(const std::vector<std::string>& files,
                          const std::string& mode,
                          const bool& runtime,
                          const bool& force) {
    std::tuple<
        bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>>
        result;
    m_proxy.callMethod("PresetUnitFilesWithMode")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, mode, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  MaskUnitFiles(const std::vector<std::string>& files,
                const bool& runtime,
                const bool& force) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("MaskUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  UnmaskUnitFiles(const std::vector<std::string>& files, const bool& runtime) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("UnmaskUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, runtime)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  RevertUnitFiles(const std::vector<std::string>& files) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("RevertUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  SetDefaultTarget(const std::string& name, const bool& force) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("SetDefaultTarget")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, force)
        .storeResultsTo(result);
    return result;
  }

  std::string GetDefaultTarget() {
    std::string result;
    m_proxy.callMethod("GetDefaultTarget")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  PresetAllUnitFiles(const std::string& mode,
                     const bool& runtime,
                     const bool& force) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("PresetAllUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(mode, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string, std::string, std::string>>
  AddDependencyUnitFiles(const std::vector<std::string>& files,
                         const std::string& target,
                         const std::string& type,
                         const bool& runtime,
                         const bool& force) {
    std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
    m_proxy.callMethod("AddDependencyUnitFiles")
        .onInterface(INTERFACE_NAME)
        .withArguments(files, target, type, runtime, force)
        .storeResultsTo(result);
    return result;
  }

  std::vector<std::string> GetUnitFileLinks(const std::string& name,
                                            const bool& runtime) {
    std::vector<std::string> result;
    m_proxy.callMethod("GetUnitFileLinks")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, runtime)
        .storeResultsTo(result);
    return result;
  }

  void SetExitCode(const uint8_t& number) {
    m_proxy.callMethod("SetExitCode")
        .onInterface(INTERFACE_NAME)
        .withArguments(number);
  }

  uint32_t LookupDynamicUserByName(const std::string& name) {
    uint32_t result;
    m_proxy.callMethod("LookupDynamicUserByName")
        .onInterface(INTERFACE_NAME)
        .withArguments(name)
        .storeResultsTo(result);
    return result;
  }

  std::string LookupDynamicUserByUID(const uint32_t& uid) {
    std::string result;
    m_proxy.callMethod("LookupDynamicUserByUID")
        .onInterface(INTERFACE_NAME)
        .withArguments(uid)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<uint32_t, std::string>> GetDynamicUsers() {
    std::vector<sdbus::Struct<uint32_t, std::string>> result;
    m_proxy.callMethod("GetDynamicUsers")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<std::string,
                            uint32_t,
                            uint32_t,
                            uint32_t,
                            uint64_t,
                            uint32_t,
                            uint32_t,
                            std::string,
                            uint32_t>>
  DumpUnitFileDescriptorStore(const std::string& name) {
    std::vector<
        sdbus::Struct<std::string, uint32_t, uint32_t, uint32_t, uint64_t,
                      uint32_t, uint32_t, std::string, uint32_t>>
        result;
    m_proxy.callMethod("DumpUnitFileDescriptorStore")
        .onInterface(INTERFACE_NAME)
        .withArguments(name)
        .storeResultsTo(result);
    return result;
  }

  sdbus::ObjectPath StartAuxiliaryScope(
      const std::string& name,
      const std::vector<sdbus::UnixFd>& pidfds,
      const uint64_t& flags,
      const std::vector<sdbus::Struct<std::string, sdbus::Variant>>&
          properties) {
    sdbus::ObjectPath result;
    m_proxy.callMethod("StartAuxiliaryScope")
        .onInterface(INTERFACE_NAME)
        .withArguments(name, pidfds, flags, properties)
        .storeResultsTo(result);
    return result;
  }

 public:
  std::string Version() {
    return m_proxy.getProperty("Version")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Features() {
    return m_proxy.getProperty("Features")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Virtualization() {
    return m_proxy.getProperty("Virtualization")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string ConfidentialVirtualization() {
    return m_proxy.getProperty("ConfidentialVirtualization")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Architecture() {
    return m_proxy.getProperty("Architecture")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Tainted() {
    return m_proxy.getProperty("Tainted")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t FirmwareTimestamp() {
    return m_proxy.getProperty("FirmwareTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t FirmwareTimestampMonotonic() {
    return m_proxy.getProperty("FirmwareTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LoaderTimestamp() {
    return m_proxy.getProperty("LoaderTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t LoaderTimestampMonotonic() {
    return m_proxy.getProperty("LoaderTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t KernelTimestamp() {
    return m_proxy.getProperty("KernelTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t KernelTimestampMonotonic() {
    return m_proxy.getProperty("KernelTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDTimestamp() {
    return m_proxy.getProperty("InitRDTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDTimestampMonotonic() {
    return m_proxy.getProperty("InitRDTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UserspaceTimestamp() {
    return m_proxy.getProperty("UserspaceTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UserspaceTimestampMonotonic() {
    return m_proxy.getProperty("UserspaceTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t FinishTimestamp() {
    return m_proxy.getProperty("FinishTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t FinishTimestampMonotonic() {
    return m_proxy.getProperty("FinishTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t ShutdownStartTimestamp() {
    return m_proxy.getProperty("ShutdownStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t ShutdownStartTimestampMonotonic() {
    return m_proxy.getProperty("ShutdownStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t SecurityStartTimestamp() {
    return m_proxy.getProperty("SecurityStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t SecurityStartTimestampMonotonic() {
    return m_proxy.getProperty("SecurityStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t SecurityFinishTimestamp() {
    return m_proxy.getProperty("SecurityFinishTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t SecurityFinishTimestampMonotonic() {
    return m_proxy.getProperty("SecurityFinishTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t GeneratorsStartTimestamp() {
    return m_proxy.getProperty("GeneratorsStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t GeneratorsStartTimestampMonotonic() {
    return m_proxy.getProperty("GeneratorsStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t GeneratorsFinishTimestamp() {
    return m_proxy.getProperty("GeneratorsFinishTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t GeneratorsFinishTimestampMonotonic() {
    return m_proxy.getProperty("GeneratorsFinishTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UnitsLoadStartTimestamp() {
    return m_proxy.getProperty("UnitsLoadStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UnitsLoadStartTimestampMonotonic() {
    return m_proxy.getProperty("UnitsLoadStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UnitsLoadFinishTimestamp() {
    return m_proxy.getProperty("UnitsLoadFinishTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UnitsLoadFinishTimestampMonotonic() {
    return m_proxy.getProperty("UnitsLoadFinishTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UnitsLoadTimestamp() {
    return m_proxy.getProperty("UnitsLoadTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t UnitsLoadTimestampMonotonic() {
    return m_proxy.getProperty("UnitsLoadTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDSecurityStartTimestamp() {
    return m_proxy.getProperty("InitRDSecurityStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDSecurityStartTimestampMonotonic() {
    return m_proxy.getProperty("InitRDSecurityStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDSecurityFinishTimestamp() {
    return m_proxy.getProperty("InitRDSecurityFinishTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDSecurityFinishTimestampMonotonic() {
    return m_proxy.getProperty("InitRDSecurityFinishTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDGeneratorsStartTimestamp() {
    return m_proxy.getProperty("InitRDGeneratorsStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDGeneratorsStartTimestampMonotonic() {
    return m_proxy.getProperty("InitRDGeneratorsStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDGeneratorsFinishTimestamp() {
    return m_proxy.getProperty("InitRDGeneratorsFinishTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDGeneratorsFinishTimestampMonotonic() {
    return m_proxy.getProperty("InitRDGeneratorsFinishTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDUnitsLoadStartTimestamp() {
    return m_proxy.getProperty("InitRDUnitsLoadStartTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDUnitsLoadStartTimestampMonotonic() {
    return m_proxy.getProperty("InitRDUnitsLoadStartTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDUnitsLoadFinishTimestamp() {
    return m_proxy.getProperty("InitRDUnitsLoadFinishTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t InitRDUnitsLoadFinishTimestampMonotonic() {
    return m_proxy.getProperty("InitRDUnitsLoadFinishTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::string LogLevel() {
    return m_proxy.getProperty("LogLevel")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  void LogLevel(const std::string& value) {
    m_proxy.setProperty("LogLevel").onInterface(INTERFACE_NAME).toValue(value);
  }

  std::string LogTarget() {
    return m_proxy.getProperty("LogTarget")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  void LogTarget(const std::string& value) {
    m_proxy.setProperty("LogTarget").onInterface(INTERFACE_NAME).toValue(value);
  }

  uint32_t NNames() {
    return m_proxy.getProperty("NNames")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t NFailedUnits() {
    return m_proxy.getProperty("NFailedUnits")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t NJobs() {
    return m_proxy.getProperty("NJobs")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t NInstalledJobs() {
    return m_proxy.getProperty("NInstalledJobs")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t NFailedJobs() {
    return m_proxy.getProperty("NFailedJobs")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  double Progress() {
    return m_proxy.getProperty("Progress")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  std::vector<std::string> Environment() {
    return m_proxy.getProperty("Environment")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  bool ConfirmSpawn() {
    return m_proxy.getProperty("ConfirmSpawn")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool ShowStatus() {
    return m_proxy.getProperty("ShowStatus")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  std::vector<std::string> UnitPath() {
    return m_proxy.getProperty("UnitPath")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::string>>();
  }

  std::string DefaultStandardOutput() {
    return m_proxy.getProperty("DefaultStandardOutput")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string DefaultStandardError() {
    return m_proxy.getProperty("DefaultStandardError")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string WatchdogDevice() {
    return m_proxy.getProperty("WatchdogDevice")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t WatchdogLastPingTimestamp() {
    return m_proxy.getProperty("WatchdogLastPingTimestamp")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t WatchdogLastPingTimestampMonotonic() {
    return m_proxy.getProperty("WatchdogLastPingTimestampMonotonic")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t RuntimeWatchdogUSec() {
    return m_proxy.getProperty("RuntimeWatchdogUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  void RuntimeWatchdogUSec(const uint64_t& value) {
    m_proxy.setProperty("RuntimeWatchdogUSec")
        .onInterface(INTERFACE_NAME)
        .toValue(value);
  }

  uint64_t RuntimeWatchdogPreUSec() {
    return m_proxy.getProperty("RuntimeWatchdogPreUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  void RuntimeWatchdogPreUSec(const uint64_t& value) {
    m_proxy.setProperty("RuntimeWatchdogPreUSec")
        .onInterface(INTERFACE_NAME)
        .toValue(value);
  }

  std::string RuntimeWatchdogPreGovernor() {
    return m_proxy.getProperty("RuntimeWatchdogPreGovernor")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  void RuntimeWatchdogPreGovernor(const std::string& value) {
    m_proxy.setProperty("RuntimeWatchdogPreGovernor")
        .onInterface(INTERFACE_NAME)
        .toValue(value);
  }

  uint64_t RebootWatchdogUSec() {
    return m_proxy.getProperty("RebootWatchdogUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  void RebootWatchdogUSec(const uint64_t& value) {
    m_proxy.setProperty("RebootWatchdogUSec")
        .onInterface(INTERFACE_NAME)
        .toValue(value);
  }

  uint64_t KExecWatchdogUSec() {
    return m_proxy.getProperty("KExecWatchdogUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  void KExecWatchdogUSec(const uint64_t& value) {
    m_proxy.setProperty("KExecWatchdogUSec")
        .onInterface(INTERFACE_NAME)
        .toValue(value);
  }

  bool ServiceWatchdogs() {
    return m_proxy.getProperty("ServiceWatchdogs")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  void ServiceWatchdogs(const bool& value) {
    m_proxy.setProperty("ServiceWatchdogs")
        .onInterface(INTERFACE_NAME)
        .toValue(value);
  }

  std::string ControlGroup() {
    return m_proxy.getProperty("ControlGroup")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string SystemState() {
    return m_proxy.getProperty("SystemState")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint8_t ExitCode() {
    return m_proxy.getProperty("ExitCode")
        .onInterface(INTERFACE_NAME)
        .get<uint8_t>();
  }

  uint64_t DefaultTimerAccuracyUSec() {
    return m_proxy.getProperty("DefaultTimerAccuracyUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultTimeoutStartUSec() {
    return m_proxy.getProperty("DefaultTimeoutStartUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultTimeoutStopUSec() {
    return m_proxy.getProperty("DefaultTimeoutStopUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultTimeoutAbortUSec() {
    return m_proxy.getProperty("DefaultTimeoutAbortUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultDeviceTimeoutUSec() {
    return m_proxy.getProperty("DefaultDeviceTimeoutUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultRestartUSec() {
    return m_proxy.getProperty("DefaultRestartUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultStartLimitIntervalUSec() {
    return m_proxy.getProperty("DefaultStartLimitIntervalUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint32_t DefaultStartLimitBurst() {
    return m_proxy.getProperty("DefaultStartLimitBurst")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  bool DefaultCPUAccounting() {
    return m_proxy.getProperty("DefaultCPUAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool DefaultBlockIOAccounting() {
    return m_proxy.getProperty("DefaultBlockIOAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool DefaultIOAccounting() {
    return m_proxy.getProperty("DefaultIOAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool DefaultIPAccounting() {
    return m_proxy.getProperty("DefaultIPAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool DefaultMemoryAccounting() {
    return m_proxy.getProperty("DefaultMemoryAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool DefaultTasksAccounting() {
    return m_proxy.getProperty("DefaultTasksAccounting")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint64_t DefaultLimitCPU() {
    return m_proxy.getProperty("DefaultLimitCPU")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitCPUSoft() {
    return m_proxy.getProperty("DefaultLimitCPUSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitFSIZE() {
    return m_proxy.getProperty("DefaultLimitFSIZE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitFSIZESoft() {
    return m_proxy.getProperty("DefaultLimitFSIZESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitDATA() {
    return m_proxy.getProperty("DefaultLimitDATA")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitDATASoft() {
    return m_proxy.getProperty("DefaultLimitDATASoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitSTACK() {
    return m_proxy.getProperty("DefaultLimitSTACK")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitSTACKSoft() {
    return m_proxy.getProperty("DefaultLimitSTACKSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitCORE() {
    return m_proxy.getProperty("DefaultLimitCORE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitCORESoft() {
    return m_proxy.getProperty("DefaultLimitCORESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitRSS() {
    return m_proxy.getProperty("DefaultLimitRSS")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitRSSSoft() {
    return m_proxy.getProperty("DefaultLimitRSSSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitNOFILE() {
    return m_proxy.getProperty("DefaultLimitNOFILE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitNOFILESoft() {
    return m_proxy.getProperty("DefaultLimitNOFILESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitAS() {
    return m_proxy.getProperty("DefaultLimitAS")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitASSoft() {
    return m_proxy.getProperty("DefaultLimitASSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitNPROC() {
    return m_proxy.getProperty("DefaultLimitNPROC")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitNPROCSoft() {
    return m_proxy.getProperty("DefaultLimitNPROCSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitMEMLOCK() {
    return m_proxy.getProperty("DefaultLimitMEMLOCK")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitMEMLOCKSoft() {
    return m_proxy.getProperty("DefaultLimitMEMLOCKSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitLOCKS() {
    return m_proxy.getProperty("DefaultLimitLOCKS")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitLOCKSSoft() {
    return m_proxy.getProperty("DefaultLimitLOCKSSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitSIGPENDING() {
    return m_proxy.getProperty("DefaultLimitSIGPENDING")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitSIGPENDINGSoft() {
    return m_proxy.getProperty("DefaultLimitSIGPENDINGSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitMSGQUEUE() {
    return m_proxy.getProperty("DefaultLimitMSGQUEUE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitMSGQUEUESoft() {
    return m_proxy.getProperty("DefaultLimitMSGQUEUESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitNICE() {
    return m_proxy.getProperty("DefaultLimitNICE")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitNICESoft() {
    return m_proxy.getProperty("DefaultLimitNICESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitRTPRIO() {
    return m_proxy.getProperty("DefaultLimitRTPRIO")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitRTPRIOSoft() {
    return m_proxy.getProperty("DefaultLimitRTPRIOSoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitRTTIME() {
    return m_proxy.getProperty("DefaultLimitRTTIME")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultLimitRTTIMESoft() {
    return m_proxy.getProperty("DefaultLimitRTTIMESoft")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultTasksMax() {
    return m_proxy.getProperty("DefaultTasksMax")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint64_t DefaultMemoryPressureThresholdUSec() {
    return m_proxy.getProperty("DefaultMemoryPressureThresholdUSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::string DefaultMemoryPressureWatch() {
    return m_proxy.getProperty("DefaultMemoryPressureWatch")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t TimerSlackNSec() {
    return m_proxy.getProperty("TimerSlackNSec")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  std::string DefaultOOMPolicy() {
    return m_proxy.getProperty("DefaultOOMPolicy")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  int32_t DefaultOOMScoreAdjust() {
    return m_proxy.getProperty("DefaultOOMScoreAdjust")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  std::string CtrlAltDelBurstAction() {
    return m_proxy.getProperty("CtrlAltDelBurstAction")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint32_t SoftRebootsCount() {
    return m_proxy.getProperty("SoftRebootsCount")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace systemd1
}  // namespace freedesktop
}  // namespace org

#endif
