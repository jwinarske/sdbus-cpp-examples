
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_freedesktop_NetworkManager_DnsManager_dns_manager_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_freedesktop_NetworkManager_DnsManager_dns_manager_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {

class DnsManager_proxy {
 public:
  static constexpr const char* INTERFACE_NAME =
      "org.freedesktop.NetworkManager.DnsManager";

 protected:
  DnsManager_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  DnsManager_proxy(const DnsManager_proxy&) = delete;
  DnsManager_proxy& operator=(const DnsManager_proxy&) = delete;
  DnsManager_proxy(DnsManager_proxy&&) = delete;
  DnsManager_proxy& operator=(DnsManager_proxy&&) = delete;

  ~DnsManager_proxy() = default;

  void registerProxy() {}

 public:
  std::string Mode() {
    return m_proxy.getProperty("Mode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string RcManager() {
    return m_proxy.getProperty("RcManager")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::vector<std::map<std::string, sdbus::Variant>> Configuration() {
    return m_proxy.getProperty("Configuration")
        .onInterface(INTERFACE_NAME)
        .get<std::vector<std::map<std::string, sdbus::Variant>>>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace NetworkManager
}  // namespace freedesktop
}  // namespace org

#endif
