
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_freedesktop_NetworkManager_Device_Loopback_loopback_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_freedesktop_NetworkManager_Device_Loopback_loopback_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {
namespace Device {

class Loopback_proxy {
 public:
  static constexpr const char* INTERFACE_NAME =
      "org.freedesktop.NetworkManager.Device.Loopback";

 protected:
  Loopback_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Loopback_proxy(const Loopback_proxy&) = delete;
  Loopback_proxy& operator=(const Loopback_proxy&) = delete;
  Loopback_proxy(Loopback_proxy&&) = delete;
  Loopback_proxy& operator=(Loopback_proxy&&) = delete;

  ~Loopback_proxy() = default;

  void registerProxy() {}

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace Device
}  // namespace NetworkManager
}  // namespace freedesktop
}  // namespace org

#endif
