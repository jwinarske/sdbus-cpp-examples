
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_freedesktop_NetworkManager_Settings_Connection_connection_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_freedesktop_NetworkManager_Settings_Connection_connection_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {
namespace Settings {

class Connection_proxy {
 public:
  static constexpr const char* INTERFACE_NAME =
      "org.freedesktop.NetworkManager.Settings.Connection";

 protected:
  Connection_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Connection_proxy(const Connection_proxy&) = delete;
  Connection_proxy& operator=(const Connection_proxy&) = delete;
  Connection_proxy(Connection_proxy&&) = delete;
  Connection_proxy& operator=(Connection_proxy&&) = delete;

  ~Connection_proxy() = default;

  void registerProxy() {
    m_proxy.uponSignal("Updated").onInterface(INTERFACE_NAME).call([this]() {
      this->onUpdated();
    });
    m_proxy.uponSignal("Removed").onInterface(INTERFACE_NAME).call([this]() {
      this->onRemoved();
    });
  }

  virtual void onUpdated() = 0;
  virtual void onRemoved() = 0;

 public:
  void Update(
      const std::map<std::string, std::map<std::string, sdbus::Variant>>&
          properties) {
    m_proxy.callMethod("Update")
        .onInterface(INTERFACE_NAME)
        .withArguments(properties);
  }

  void UpdateUnsaved(
      const std::map<std::string, std::map<std::string, sdbus::Variant>>&
          properties) {
    m_proxy.callMethod("UpdateUnsaved")
        .onInterface(INTERFACE_NAME)
        .withArguments(properties);
  }

  void Delete() { m_proxy.callMethod("Delete").onInterface(INTERFACE_NAME); }

  std::map<std::string, std::map<std::string, sdbus::Variant>> GetSettings() {
    std::map<std::string, std::map<std::string, sdbus::Variant>> result;
    m_proxy.callMethod("GetSettings")
        .onInterface(INTERFACE_NAME)
        .storeResultsTo(result);
    return result;
  }

  std::map<std::string, std::map<std::string, sdbus::Variant>> GetSecrets(
      const std::string& setting_name) {
    std::map<std::string, std::map<std::string, sdbus::Variant>> result;
    m_proxy.callMethod("GetSecrets")
        .onInterface(INTERFACE_NAME)
        .withArguments(setting_name)
        .storeResultsTo(result);
    return result;
  }

  void ClearSecrets() {
    m_proxy.callMethod("ClearSecrets").onInterface(INTERFACE_NAME);
  }

  void Save() { m_proxy.callMethod("Save").onInterface(INTERFACE_NAME); }

  std::map<std::string, sdbus::Variant> Update2(
      const std::map<std::string, std::map<std::string, sdbus::Variant>>&
          settings,
      const uint32_t& flags,
      const std::map<std::string, sdbus::Variant>& args) {
    std::map<std::string, sdbus::Variant> result;
    m_proxy.callMethod("Update2")
        .onInterface(INTERFACE_NAME)
        .withArguments(settings, flags, args)
        .storeResultsTo(result);
    return result;
  }

 public:
  bool Unsaved() {
    return m_proxy.getProperty("Unsaved")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint32_t Flags() {
    return m_proxy.getProperty("Flags")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::string Filename() {
    return m_proxy.getProperty("Filename")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t VersionId() {
    return m_proxy.getProperty("VersionId")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace Settings
}  // namespace NetworkManager
}  // namespace freedesktop
}  // namespace org

#endif
