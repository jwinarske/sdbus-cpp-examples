
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_bluez_BatteryProviderManager1_battery_provider_manager1_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_bluez_BatteryProviderManager1_battery_provider_manager1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class BatteryProviderManager1_proxy {
 public:
  static constexpr const char* INTERFACE_NAME =
      "org.bluez.BatteryProviderManager1";

 protected:
  BatteryProviderManager1_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  BatteryProviderManager1_proxy(const BatteryProviderManager1_proxy&) = delete;
  BatteryProviderManager1_proxy& operator=(
      const BatteryProviderManager1_proxy&) = delete;
  BatteryProviderManager1_proxy(BatteryProviderManager1_proxy&&) = delete;
  BatteryProviderManager1_proxy& operator=(BatteryProviderManager1_proxy&&) =
      delete;

  ~BatteryProviderManager1_proxy() = default;

  void registerProxy() {}

 public:
  void RegisterBatteryProvider(const sdbus::ObjectPath& provider) {
    m_proxy.callMethod("RegisterBatteryProvider")
        .onInterface(INTERFACE_NAME)
        .withArguments(provider);
  }

  void UnregisterBatteryProvider(const sdbus::ObjectPath& provider) {
    m_proxy.callMethod("UnregisterBatteryProvider")
        .onInterface(INTERFACE_NAME)
        .withArguments(provider);
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace bluez
}  // namespace org

#endif
