
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_bluez_Profile1_profile1_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_bluez_Profile1_profile1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class Profile1_proxy {
 public:
  static constexpr const char* INTERFACE_NAME = "org.bluez.Profile1";

 protected:
  Profile1_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Profile1_proxy(const Profile1_proxy&) = delete;
  Profile1_proxy& operator=(const Profile1_proxy&) = delete;
  Profile1_proxy(Profile1_proxy&&) = delete;
  Profile1_proxy& operator=(Profile1_proxy&&) = delete;

  ~Profile1_proxy() = default;

  void registerProxy() {}

 public:
  void NewConnection(
      const sdbus::ObjectPath& device,
      const sdbus::UnixFd& fd,
      const std::map<std::string, sdbus::Variant>& fd_properties) {
    m_proxy.callMethod("NewConnection")
        .onInterface(INTERFACE_NAME)
        .withArguments(device, fd, fd_properties);
  }

  void Release() { m_proxy.callMethod("Release").onInterface(INTERFACE_NAME); }

  void Cancel() { m_proxy.callMethod("Cancel").onInterface(INTERFACE_NAME); }

  void RequestDisconnection(const sdbus::ObjectPath& device) {
    m_proxy.callMethod("RequestDisconnection")
        .onInterface(INTERFACE_NAME)
        .withArguments(device);
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace bluez
}  // namespace org

#endif
