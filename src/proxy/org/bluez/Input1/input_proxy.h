
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_bluez_Input1_input_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_bluez_Input1_input_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class Input1_proxy {
 public:
  static constexpr const char* INTERFACE_NAME = "org.bluez.Input1";

 protected:
  Input1_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Input1_proxy(const Input1_proxy&) = delete;
  Input1_proxy& operator=(const Input1_proxy&) = delete;
  Input1_proxy(Input1_proxy&&) = delete;
  Input1_proxy& operator=(Input1_proxy&&) = delete;

  ~Input1_proxy() = default;

  void registerProxy() {}

 public:
  std::string ReconnectMode() {
    return m_proxy.getProperty("ReconnectMode")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace bluez
}  // namespace org

#endif
