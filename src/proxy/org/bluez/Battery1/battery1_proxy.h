
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_bluez_Battery1_battery1_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_bluez_Battery1_battery1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class Battery1_proxy {
 public:
  static constexpr const char* INTERFACE_NAME = "org.bluez.Battery1";

 protected:
  Battery1_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Battery1_proxy(const Battery1_proxy&) = delete;
  Battery1_proxy& operator=(const Battery1_proxy&) = delete;
  Battery1_proxy(Battery1_proxy&&) = delete;
  Battery1_proxy& operator=(Battery1_proxy&&) = delete;

  ~Battery1_proxy() = default;

  void registerProxy() {}

 public:
  uint8_t Percentage() {
    return m_proxy.getProperty("Percentage")
        .onInterface(INTERFACE_NAME)
        .get<uint8_t>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace bluez
}  // namespace org

#endif
