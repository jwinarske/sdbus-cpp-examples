
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_org_bluez_NetworkServer1_network_server1_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_org_bluez_NetworkServer1_network_server1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class NetworkServer1_proxy {
 public:
  static constexpr const char* INTERFACE_NAME = "org.bluez.NetworkServer1";

 protected:
  NetworkServer1_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  NetworkServer1_proxy(const NetworkServer1_proxy&) = delete;
  NetworkServer1_proxy& operator=(const NetworkServer1_proxy&) = delete;
  NetworkServer1_proxy(NetworkServer1_proxy&&) = delete;
  NetworkServer1_proxy& operator=(NetworkServer1_proxy&&) = delete;

  ~NetworkServer1_proxy() = default;

  void registerProxy() {}

 public:
  void Register(const std::string& uuid, const std::string& bridge) {
    m_proxy.callMethod("Register")
        .onInterface(INTERFACE_NAME)
        .withArguments(uuid, bridge);
  }

  void Unregister(const std::string& uuid) {
    m_proxy.callMethod("Unregister")
        .onInterface(INTERFACE_NAME)
        .withArguments(uuid);
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace bluez
}  // namespace org

#endif
