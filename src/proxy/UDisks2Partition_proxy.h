
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_UDisks2Partition_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_UDisks2Partition_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace UDisks2 {

class Partition_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.UDisks2.Partition";

protected:
    Partition_proxy(sdbus::IProxy& proxy)
        : m_proxy(proxy)
    {
    }

    Partition_proxy(const Partition_proxy&) = delete;
    Partition_proxy& operator=(const Partition_proxy&) = delete;
    Partition_proxy(Partition_proxy&&) = delete;
    Partition_proxy& operator=(Partition_proxy&&) = delete;

    ~Partition_proxy() = default;

    void registerProxy()
    {
    }

public:
    void SetType(const std::string& type, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("SetType").onInterface(INTERFACE_NAME).withArguments(type, options);
    }

    void SetName(const std::string& name, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("SetName").onInterface(INTERFACE_NAME).withArguments(name, options);
    }

    void SetUUID(const std::string& uuid, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("SetUUID").onInterface(INTERFACE_NAME).withArguments(uuid, options);
    }

    void SetFlags(const uint64_t& flags, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("SetFlags").onInterface(INTERFACE_NAME).withArguments(flags, options);
    }

    void Resize(const uint64_t& size, const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("Resize").onInterface(INTERFACE_NAME).withArguments(size, options);
    }

    void Delete(const std::map<std::string, sdbus::Variant>& options)
    {
        m_proxy.callMethod("Delete").onInterface(INTERFACE_NAME).withArguments(options);
    }

public:
    uint32_t Number()
    {
        return m_proxy.getProperty("Number").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    std::string Type()
    {
        return m_proxy.getProperty("Type").onInterface(INTERFACE_NAME).get<std::string>();
    }

    uint64_t Flags()
    {
        return m_proxy.getProperty("Flags").onInterface(INTERFACE_NAME).get<uint64_t>();
    }

    uint64_t Offset()
    {
        return m_proxy.getProperty("Offset").onInterface(INTERFACE_NAME).get<uint64_t>();
    }

    uint64_t Size()
    {
        return m_proxy.getProperty("Size").onInterface(INTERFACE_NAME).get<uint64_t>();
    }

    std::string Name()
    {
        return m_proxy.getProperty("Name").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string UUID()
    {
        return m_proxy.getProperty("UUID").onInterface(INTERFACE_NAME).get<std::string>();
    }

    sdbus::ObjectPath Table()
    {
        return m_proxy.getProperty("Table").onInterface(INTERFACE_NAME).get<sdbus::ObjectPath>();
    }

    bool IsContainer()
    {
        return m_proxy.getProperty("IsContainer").onInterface(INTERFACE_NAME).get<bool>();
    }

    bool IsContained()
    {
        return m_proxy.getProperty("IsContained").onInterface(INTERFACE_NAME).get<bool>();
    }

private:
    sdbus::IProxy& m_proxy;
};

}}} // namespaces

#endif
