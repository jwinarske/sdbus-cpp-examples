
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__src_proxy_UPowerDisplayDevice_proxy_h__proxy__H__
#define __sdbuscpp__src_proxy_UPowerDisplayDevice_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace UPower {

class Device_proxy {
 public:
  static constexpr const char* INTERFACE_NAME = "org.freedesktop.UPower.Device";

 protected:
  Device_proxy(sdbus::IProxy& proxy) : m_proxy(proxy) {}

  Device_proxy(const Device_proxy&) = delete;
  Device_proxy& operator=(const Device_proxy&) = delete;
  Device_proxy(Device_proxy&&) = delete;
  Device_proxy& operator=(Device_proxy&&) = delete;

  ~Device_proxy() = default;

  void registerProxy() {}

 public:
  void Refresh() { m_proxy.callMethod("Refresh").onInterface(INTERFACE_NAME); }

  std::vector<sdbus::Struct<uint32_t, double, uint32_t>> GetHistory(
      const std::string& type,
      const uint32_t& timespan,
      const uint32_t& resolution) {
    std::vector<sdbus::Struct<uint32_t, double, uint32_t>> result;
    m_proxy.callMethod("GetHistory")
        .onInterface(INTERFACE_NAME)
        .withArguments(type, timespan, resolution)
        .storeResultsTo(result);
    return result;
  }

  std::vector<sdbus::Struct<double, double>> GetStatistics(
      const std::string& type) {
    std::vector<sdbus::Struct<double, double>> result;
    m_proxy.callMethod("GetStatistics")
        .onInterface(INTERFACE_NAME)
        .withArguments(type)
        .storeResultsTo(result);
    return result;
  }

  void EnableChargeThreshold(const bool& chargeThreshold) {
    m_proxy.callMethod("EnableChargeThreshold")
        .onInterface(INTERFACE_NAME)
        .withArguments(chargeThreshold);
  }

 public:
  std::string NativePath() {
    return m_proxy.getProperty("NativePath")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Vendor() {
    return m_proxy.getProperty("Vendor")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Model() {
    return m_proxy.getProperty("Model")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  std::string Serial() {
    return m_proxy.getProperty("Serial")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint64_t UpdateTime() {
    return m_proxy.getProperty("UpdateTime")
        .onInterface(INTERFACE_NAME)
        .get<uint64_t>();
  }

  uint32_t Type() {
    return m_proxy.getProperty("Type")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  bool PowerSupply() {
    return m_proxy.getProperty("PowerSupply")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool HasHistory() {
    return m_proxy.getProperty("HasHistory")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool HasStatistics() {
    return m_proxy.getProperty("HasStatistics")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool Online() {
    return m_proxy.getProperty("Online")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  double Energy() {
    return m_proxy.getProperty("Energy")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  double EnergyEmpty() {
    return m_proxy.getProperty("EnergyEmpty")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  double EnergyFull() {
    return m_proxy.getProperty("EnergyFull")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  double EnergyFullDesign() {
    return m_proxy.getProperty("EnergyFullDesign")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  double EnergyRate() {
    return m_proxy.getProperty("EnergyRate")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  double Voltage() {
    return m_proxy.getProperty("Voltage")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  int32_t ChargeCycles() {
    return m_proxy.getProperty("ChargeCycles")
        .onInterface(INTERFACE_NAME)
        .get<int32_t>();
  }

  double Luminosity() {
    return m_proxy.getProperty("Luminosity")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  int64_t TimeToEmpty() {
    return m_proxy.getProperty("TimeToEmpty")
        .onInterface(INTERFACE_NAME)
        .get<int64_t>();
  }

  int64_t TimeToFull() {
    return m_proxy.getProperty("TimeToFull")
        .onInterface(INTERFACE_NAME)
        .get<int64_t>();
  }

  double Percentage() {
    return m_proxy.getProperty("Percentage")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  double Temperature() {
    return m_proxy.getProperty("Temperature")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  bool IsPresent() {
    return m_proxy.getProperty("IsPresent")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  uint32_t State() {
    return m_proxy.getProperty("State")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  bool IsRechargeable() {
    return m_proxy.getProperty("IsRechargeable")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  double Capacity() {
    return m_proxy.getProperty("Capacity")
        .onInterface(INTERFACE_NAME)
        .get<double>();
  }

  uint32_t Technology() {
    return m_proxy.getProperty("Technology")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t WarningLevel() {
    return m_proxy.getProperty("WarningLevel")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t BatteryLevel() {
    return m_proxy.getProperty("BatteryLevel")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  std::string IconName() {
    return m_proxy.getProperty("IconName")
        .onInterface(INTERFACE_NAME)
        .get<std::string>();
  }

  uint32_t ChargeStartThreshold() {
    return m_proxy.getProperty("ChargeStartThreshold")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  uint32_t ChargeEndThreshold() {
    return m_proxy.getProperty("ChargeEndThreshold")
        .onInterface(INTERFACE_NAME)
        .get<uint32_t>();
  }

  bool ChargeThresholdEnabled() {
    return m_proxy.getProperty("ChargeThresholdEnabled")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

  bool ChargeThresholdSupported() {
    return m_proxy.getProperty("ChargeThresholdSupported")
        .onInterface(INTERFACE_NAME)
        .get<bool>();
  }

 private:
  sdbus::IProxy& m_proxy;
};

}  // namespace UPower
}  // namespace freedesktop
}  // namespace org

#endif
