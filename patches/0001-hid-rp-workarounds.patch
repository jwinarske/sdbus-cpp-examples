From ec0b0b325278da7f12d7f7304cd8995f94517bf4 Mon Sep 17 00:00:00 2001
From: Joel Winarske <joel.winarske@gmail.com>
Date: Fri, 7 Mar 2025 12:25:02 -0800
Subject: [PATCH] hid-rp workarounds

Signed-off-by: Joel Winarske <joel.winarske@gmail.com>
---
 hid-rp/hid/rdf/main_items.hpp |  8 ++++++
 hid-rp/hid/rdf/unit.hpp       | 49 ++++++++++++++---------------------
 2 files changed, 28 insertions(+), 29 deletions(-)

diff --git a/hid-rp/hid/rdf/main_items.hpp b/hid-rp/hid/rdf/main_items.hpp
index cf5718e..b987299 100644
--- a/hid-rp/hid/rdf/main_items.hpp
+++ b/hid-rp/hid/rdf/main_items.hpp
@@ -108,6 +108,8 @@ enum field_type : std::uint16_t
         data_field_flag::CONSTANT | data_field_flag::VARIABLE | data_field_flag::ABSOLUTE,
     RELATIVE_CONSTANT =
         data_field_flag::CONSTANT | data_field_flag::VARIABLE | data_field_flag::RELATIVE,
+    CONSTANT =
+        data_field_flag::CONSTANT | data_field_flag::ABSOLUTE,
     PADDING = data_field_flag::CONSTANT | data_field_flag::ARRAY,
 };
 
@@ -183,6 +185,12 @@ class data_field
                                            field_type::RELATIVE_CONSTANT);
     }
 
+    constexpr static auto constant(flags extra_flags = flags::NONE)
+    {
+        return data_field_item<1>(TAG, static_cast<std::uint16_t>(extra_flags) |
+                                           field_type::CONSTANT);
+    }
+
     /// @brief  Creates not only the data field item, but adds @ref report_count and @ref
     /// report_size
     ///         items as well, in order to define a specific bit padding with a single entry.
diff --git a/hid-rp/hid/rdf/unit.hpp b/hid-rp/hid/rdf/unit.hpp
index 44b8ba3..c14d509 100644
--- a/hid-rp/hid/rdf/unit.hpp
+++ b/hid-rp/hid/rdf/unit.hpp
@@ -8,6 +8,7 @@
 ///         If a copy of the MPL was not distributed with this file, You can obtain one at
 ///         https://mozilla.org/MPL/2.0/.
 ///
+
 #ifndef __HID_RDF_UNIT_HPP_
 #define __HID_RDF_UNIT_HPP_
 
@@ -19,15 +20,12 @@ namespace hid::rdf::unit
 using system = global::unit_system;
 
 // TODO: use calculate_code() instead of hardcoded
-enum class code : std::uint32_t
+enum class code : std::uint16_t
 {
-    NONE = 0,
+    NONE = 0x00000000,
     LENGTH = 0x00000010,
     MASS = 0x00000100,
     TIME = 0x00001000,
-    TEMPERATURE = 0x00010000,
-    CURRENT = 0x00100000,
-    LUMINOUS_INTENSITY = 0x01000000,
 
     METER = 0x00000011,
     RADIAN = 0x00000012,
@@ -36,10 +34,7 @@ enum class code : std::uint32_t
     GRAM = 0x00000101,
     SLUG = 0x00000103,
     SECOND = 0x00001001,
-    KELVIN = 0x00010001,
-    FAHRENHEIT = 0x00010003,
-    AMPERE = 0x00100001,
-    CANDELA = 0x01000001,
+
     NEWTON = 0x0000E111,
     METER_PER_SECOND = 0x0000F011,
     METER_PER_SECOND2 = 0x0000E011,
@@ -51,6 +46,14 @@ enum class code : std::uint32_t
     RADIAN_PER_SECOND = 0x0000F012,
     RADIAN_PER_SECOND2 = 0x0000E012,
     WATT = 0x0000D121,
+#if 0
+    TEMPERATURE = 0x00010000,
+    CURRENT = 0x00100000,
+    LUMINOUS_INTENSITY = 0x01000000,
+    KELVIN = 0x00010001,
+    FAHRENHEIT = 0x00010003,
+    AMPERE = 0x00100001,
+    CANDELA = 0x01000001,
     AMPERE_PER_SECOND = 0x0010F001,
     COULOMB = 0x00101001,
     FARAD = 0x00204FE1,
@@ -62,6 +65,7 @@ enum class code : std::uint32_t
     TESLA = 0x00F0E101,
     VOLT = 0x00F0D121,
     WEBER = 0x00F0E121,
+#endif
 };
 
 constexpr code calculate_code(system sys = system::NONE, int length_count = 0, int mass_count = 0,
@@ -69,7 +73,7 @@ constexpr code calculate_code(system sys = system::NONE, int length_count = 0, i
                               int luminous_int_count = 0)
 {
     return static_cast<code>(
-        (static_cast<std::uint32_t>(sys) << (global::unit_nibble_index::SYSTEM * 4)) |
+        (static_cast<std::uint16_t>(sys) << (global::unit_nibble_index::SYSTEM * 4)) |
         ((length_count & 0xf) << (global::unit_nibble_index::LENGTH * 4)) |
         ((mass_count & 0xf) << (global::unit_nibble_index::MASS * 4)) |
         ((time_count & 0xf) << (global::unit_nibble_index::TIME * 4)) |
@@ -104,25 +108,16 @@ constexpr inline auto unit(code flags)
     return short_item<DATA_SIZE>(global::tag::UNIT, static_cast<std::uint32_t>(flags));
 }
 
-class exponent : public short_item<1>
-{
-  public:
-    constexpr exponent(std::int8_t exp = 0)
-        : short_item(global::tag::UNIT_EXPONENT, static_cast<byte_type>(exp & 0xf))
-    {}
-};
-
 /// @brief  Template for exact units. Each unit is defined by its code and its base exponent
 ///         (as some of the default SI units have non-zero base exponent).
 ///         Creating a derived object will therefore contain a unit and a unit exponent item.
 /// @tparam CODE_: The unit's code
 /// @tparam BASE_EXP_: The unit's base exponent
 template <code CODE_, std::int8_t BASE_EXP_ = 0>
-class base : public array<1 + value_size(CODE_) + sizeof(exponent)>
+class base : public array<1 + value_size(CODE_)>
 {
     static constexpr std::size_t UNIT_CODE_SIZE = value_size(CODE_);
-    static constexpr std::size_t EXPONENT_SIZE = sizeof(exponent);
-    static constexpr std::size_t SIZE = (1 + UNIT_CODE_SIZE) + EXPONENT_SIZE;
+    static constexpr std::size_t SIZE = (1 + UNIT_CODE_SIZE);
 
     using base_t = array<SIZE>;
 
@@ -132,15 +127,9 @@ class base : public array<1 + value_size(CODE_) + sizeof(exponent)>
 
     static constexpr auto unit_item() { return unit::unit<CODE>(); }
 
-    static constexpr auto exponent_item(std::int8_t relative_exponent = 0)
-    {
-        return unit::exponent(BASE_EXPONENT + relative_exponent);
-    }
-
     /// @brief Create items defining an exact unit.
-    /// @param relative_exponent: relative ten's exponent to be used for the variable field
-    constexpr base(std::int8_t relative_exponent = 0)
-        : base_t((unit_item(), exponent_item(BASE_EXPONENT + relative_exponent)))
+    constexpr base()
+        : base_t(unit_item())
     {}
 };
 
@@ -152,6 +141,7 @@ using degree = base<code::DEGREE>;
 using gram = base<code::GRAM>;
 using kilogram = base<code::GRAM, 3>;
 using second = base<code::SECOND>;
+#if 0
 using kelvin = base<code::KELVIN>;
 using fahrenheit = base<code::FAHRENHEIT>;
 using ampere = base<code::AMPERE>;
@@ -178,6 +168,7 @@ using siemens = base<code::SIEMENS, -3 - 2 * 2>;
 using tesla = base<code::TESLA, 3>;
 using volt = base<code::VOLT, 3 + 2 * 2>;
 using weber = base<code::WEBER, 3 + 2 * 2>;
+#endif
 
 } // namespace hid::rdf::unit
 
-- 
2.48.1

